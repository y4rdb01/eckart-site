/* Generate the input data used by wirewrld.  A single command line argument
   indicates the size of each of two dimensions of the cell universe, but is
   ignored.

   The file "my_rand.h" is located in the examples/data directory of the
   distribution.
*/

#include <stdio.h>

enum direction {up, down, left, right};

/* Print a cell value setting. */
void cell(int hpos, int vpos, int value) {
    printf("[%d, %d] = %d\n", hpos, vpos, value);
}

/* Draw a horizontal wire. */
void hline(int vpos, int ihpos, int fhpos) {
        int i;
        for (i = ihpos; i <= fhpos; i++) cell(i, vpos, 1);
}

/* Draw a vertical wire. */
void vline(int hpos, int ivpos, int fvpos) {
        int i;
        for (i = ivpos; i <= fvpos; i++) cell(hpos, i, 1);
}

/* Draw a diode. */
void diode(int hpos, int vpos, enum direction face) {
        switch (face) {
        case up:
                cell(hpos, vpos, 1);
                cell(hpos-1, vpos, 1);
                cell(hpos+1, vpos, 1);
                cell(hpos-1, vpos+1, 1);
                cell(hpos+1, vpos+1, 1);
                break;
        case down:
                cell(hpos-1, vpos, 1);
                cell(hpos+1, vpos, 1);
                cell(hpos-1, vpos+1, 1);
                cell(hpos, vpos+1, 1);
                cell(hpos+1, vpos+1, 1);
                break;
        case left:
                cell(hpos, vpos, 1);
                cell(hpos, vpos-1, 1);
                cell(hpos, vpos+1, 1);
                cell(hpos-1, vpos-1, 1);
                cell(hpos-1, vpos+1, 1);
                break;
        case right:
                cell(hpos, vpos, 1);
                cell(hpos, vpos-1, 1);
                cell(hpos, vpos+1, 1);
                cell(hpos+1, vpos-1, 1);
                cell(hpos+1, vpos+1, 1);
        }
}

/* Draw a memory circuit. */
void memory(int hpos, int vpos) {
        hline(vpos-1, hpos+2, hpos+7);
        hline(vpos+1, hpos+2, hpos+3); 
        vline(hpos+4, vpos+2, vpos+4);
        cell(hpos+5, vpos+5, 1);
        cell(hpos+6, vpos+4, 1);
        cell(hpos+7, vpos+3, 1);
        diode(hpos+8, vpos-1, right);
        diode(hpos+8, vpos+3, right);
        cell(hpos+10, vpos+3, 1);
        hline(vpos-1, hpos+10, hpos+11);
        diode(hpos+12, vpos+3, left);
        vline(hpos+12, vpos, vpos+1);
        hline(vpos+3, hpos+13, hpos+15);
        cell(hpos+13, vpos-1, 1);
        diode(hpos+15, vpos-1, left);
        cell(hpos+16, vpos-1, 1);
        cell(hpos+16, vpos+2, 1);
        vline(hpos+17, vpos, vpos+1);
        hline(vpos+2, hpos+18, hpos+20);
}

int main(int argc, char *argv[]) {
        /* NOTE: Command line size is ignored! */

        /* Check usage. */
        if (argc == 1) {
                fprintf(stderr, "%s: size of automaton must be given.\n",
                        argv[0]);
                return 1;
        } else if (argc > 2)
                fprintf(stderr, "%s: extra options ignored.\n", argv[0]);

        printf("0\n");

        /* generate electrons */
        hline(7, 7, 9);
        hline(3, 7, 9); 
        vline(6, 4, 6);
        vline(10, 4, 6);

        cell(10, 6, 3);        /* electron-head */
        cell(10, 5, 2);        /* electron-tail */

        hline(7, 11, 35);
        vline(36, 8, 15);

        memory(35, 17);

        vline(56, 20, 25);
        hline(26, 37, 55);
        vline(36, 27, 30);

        memory(35, 32);

        vline(56, 35, 40);
        hline(41, 37, 55);
        vline(36, 42, 45);

        memory(35, 47);

        vline(56, 50, 57);
        hline(58, 7, 55);
        vline(6, 17, 57);
        cell(7, 16, 1);
        diode(8, 16, right);
        hline(16, 10, 12);

        memory(11, 17);

        hline(18, 32, 36);
        vline(32, 20, 25);
        hline(26, 13, 31);
        vline(12, 27, 30);

        memory(11, 32);

        hline(33, 32, 36);
        vline(32, 35, 40);
        hline(41, 13, 31);
        vline(12, 42, 45);

        memory(11, 47);

        hline(48, 32, 36);

        /* Turn the electron generator off. */

        printf("250\n");
        cell(11, 7, 0);

        return 0;
}
