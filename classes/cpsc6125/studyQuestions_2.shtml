<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Advanced Operating Systems (CPSC 6125)
	- Study Questions for Test #2
</p>

<style type="text/css">
	ol.question_list {list-style-type: none;}
	ol.question_list li:before {content: counter(question, decimal) ") ";}
	ol.question_list li { counter-increment: question;}

	ol.answer_list {list-style-type: none;}
	ol.answer_list li:before {content: counter(answer, lower-latin) ") ";}
	ol.answer_list li { counter-increment: answer;}

	ol.match_list {list-style-type: none;}
	ol.match_list li:before {content: counter(match, upper-latin) ") ";}
	ol.match_list li { counter-increment: match;}

	ul.bullet_list {list-style-type: disc;}
	ul.bullet_list li:before {content: "";}
	ul.bullet_list li { counter-increment: bogus;}
</style>

<p>
The following list of exam study questions are provided as a means to help you
assess your understanding of the topics presented in class. While every
reasonable attempt has been made to create a comprehensive list of questions,
they should <strong>not</strong> be the only means by which you assess your
own understanding of the course materials. While many of these questions
may appear on your exam, be aware that the exam may include questions
that do not appear below. However, it is unlikely you will perform well on
the exam if you have difficulty answering these questions correctly.
</p>


<ol class="question_list">
<li> Which of the following are <strong>not</strong> essential qualities of
	files?
	<ol class="answer_list">
	<li> Multiple processes can access the same file simultaneously.
	<li> Are stored on either hard disk drives (HDDs) or solid-state
		disks (SSDs).
	<li> Ability to store LARGE amounts of information.
	<li> The lifetime of a file is not bound to any process.
	<li> None of the above
	</ol>
</li><br/>
<li> The file system provides an abstraction of how files are
	<ol class="answer_list">
	<li> manipulated.
	<li> read.
	<li> managed.
	<li> written.
	<li> None of the above
	</ol>
</li><br/>
<li> File names
	<ol class="answer_list">
	<li> are a sequence of (readable) characters for referring to the file.
	<li> may be of any length, and contain both upper and lower case
		characters.
	<li> <strong>must</strong> have a single extension
		(e.g., ".txt", ".exe") indicating the type of data they hold.
	<li> differ from system to system, depending upon the file system(s)
		the OS makes available.
	<li> None of the above
	</ol>
</li><br/>
<li> The extension (e.g.,  ".txt", ".exe") for a file name
	<ol class="answer_list">
	<li> is typically only meaningful to application programs.
	<li> indicates to the file system what type of data to restrict the
		file to holding (e.g., a ".txt" file may not hold a pdf
		document).
	<li> is a convenience to users to make it easier to discern what
		kind of data each file holds.
	<li> can be ignored by the OS (e.g., Unix/Linux).
	<li> None of the above
	</ol>
</li><br/>
<li> The logical organization of the information in a file is called its
	<ol class="answer_list">
	<li> file type.
	<li> file system.
	<li> file structure.
	<li> file attributes.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are the basic types of file structures?
	<ol class="answer_list">
	<li> Unstructured sequence of bytes.
	<li> Sequence of (structured) records.
	<li> List of object-oriented tables.
	<li> Tree of (structured) records.
	<li> None of the above
	</ol>
</li><br/>
<li> Regular files in Unix/Linux and Windows are organized as
	<ol class="answer_list">
	<li> an unstructured sequence of bytes.
	<li> a sequence of (structured) records.
	<li> a list of object-oriented tables.
	<li> a tree of (structured) records.
	<li> None of the above
	</ol>
</li><br/>
<li> Indexed Sequential Access Method (ISAM) files on mainframes are organized
	as
	<ol class="answer_list">
	<li> an unstructured sequence of bytes.
	<li> a sequence of (structured) records.
	<li> a list of object-oriented tables.
	<li> a tree of (structured) records.
	<li> None of the above
	</ol>
</li><br/>
<li> Indexed Virtual Storage Access Method (Indexed VSAM) files on mainframes
	are organized as
	<ol class="answer_list">
	<li> an unstructured sequence of bytes.
	<li> a sequence of (structured) records.
	<li> a list of object-oriented tables.
	<li> a tree of (structured) records.
	<li> None of the above
	</ol>
</li><br/>
<li> File types describe the broad categorization of the kinds of information
	a file represents/holds. Which of the following are common file types?
	<ol class="answer_list">
	<li> Regular (data) files.
	<li> Executable files.
	<li> Special (device) files.
	<li> Directories.
	<li> None of the above
	</ol>
</li><br/>
<li> Files that model I/O devices that work with one byte at time are called
	<ol class="answer_list">
	<li> I/O files.
	<li> System files.
	<li> Character special files.
	<li> Block special files.
	<li> None of the above
	</ol>
</li><br/>
<li> Files that model I/O devices that work with arrays of bytes at a time
	are called
	<ol class="answer_list">
	<li> I/O files.
	<li> System files.
	<li> Character special files.
	<li> Block special files.
	<li> None of the above
	</ol>
</li><br/>
<li> Devices such as keyboards, mice, and printers usually correspond to
	<ol class="answer_list">
	<li> I/O files.
	<li> System files.
	<li> Character special files.
	<li> Block special files.
	<li> None of the above
	</ol>
</li><br/>
<li> Devices such as hard disk drives (HDDs) and solid-state disks (SSDs)
	usually correspond to
	<ol class="answer_list">
	<li> I/O files.
	<li> System files.
	<li> Character special files.
	<li> Block special files.
	<li> None of the above
	</ol>
</li><br/>
<li> The two primary file access methods are
	<ol class="answer_list">
	<li> Linear access.
	<li> Sequential access.
	<li> Indexed access.
	<li> Random access.
	<li> None of the above
	</ol>
</li><br/>
<li> If accessing the Nth byte of a file requires first accessing byte N-1,
	then the file access type is
	<ol class="answer_list">
	<li> Linear access.
	<li> Sequential access.
	<li> Indexed access.
	<li> Random access.
	<li> None of the above
	</ol>
</li><br/>
<li> If accessing the Nth byte of a file can be done <strong>without</strong>
	first accessing byte N-1, then the file access type is
	<ol class="answer_list">
	<li> Linear access.
	<li> Sequential access.
	<li> Indexed access.
	<li> Random access.
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX system call can be used to skip to a particular byte
	location within a file (thus supporting random access)?
	<ol class="answer_list">
	<li> find
	<li> lseek
	<li> skip
	<li> rand
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file attributes are common to many systems?
	<ol class="answer_list">
	<li> File name.
	<li> The number of disk blocks the file occupies.
	<li> Size of the file in bytes.
	<li> The optimal block size for reading or writing this file
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to create a new file?
	<ol class="answer_list">
	<li> creat
	<li> mkfile
	<li> new
	<li> make
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to open an existing file (for reading
	or writing)?
	<ol class="answer_list">
	<li> stat
	<li> fopen
	<li> find
	<li> create
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to close an open file (ensuring that any
	buffers are written back disk)?
	<ol class="answer_list">
	<li> end
	<li> flush
	<li> fclose
	<li> done
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to delete an existing file?
	<ol class="answer_list">
	<li> delete
	<li> free
	<li> deallocate
	<li> remove
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to read data from a file?
	<ol class="answer_list">
	<li> read
	<li> read_byte
	<li> scan
	<li> get_byte
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to write data to a file?
	<ol class="answer_list">
	<li> print
	<li> put_char
	<li> write
	<li> write_byte
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to set the current position within an open file?
	<ol class="answer_list">
	<li> find
	<li> locate
	<li> seek
	<li> position
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to obtain information about a file?
	<ol class="answer_list">
	<li> get_info
	<li> finfo
	<li> fattr
	<li> stat
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to change the name of an existing file?
	<ol class="answer_list">
	<li> move
	<li> rename
	<li> chfile
	<li> touch
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to change the owner of a file?
	<ol class="answer_list">
	<li> finfo
	<li> fattr
	<li> chown
	<li> owner
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to change the permissions of a file?
	<ol class="answer_list">
	<li> perm
	<li> chmod
	<li> chperm
	<li> stat
	<li> None of the above
	</ol>
</li><br/>

<li> File systems that have only a single directory of files, with no
	sub-directory hierarchies
	<ol class="answer_list">
	<li> are called flat file systems.
	<li> can accommodate larger files than a hierarchical file system.
	<li> were being used until the mid-1980s.
	<li> are in common use today, typically for USB flash drives.
	<li> None of the above
	</ol>
</li><br/>
<li> The most common type of file system in use today are
	<ol class="answer_list">
	<li> flat file systems.
	<li> linear file systems.
	<li> indexed file systems.
	<li> hierarchical file systems.
	<li> None of the above
	</ol>
</li><br/>
<li> Hard links to files
	<ol class="answer_list">
	<li> require the file to be copied, with future changes to the
		original being propigated to the copy.
	<li> maintain a single copy of the file, but accessible from different
		places/directories within the file system.
	<li> use "copy on write" to maintain a single copy of the file until
		a change is made.
	<li> is the kind used when a file is first created.
	<li> None of the above
	</ol>
</li><br/>
<li> Hard links to a directory, from within the current directory,
	<ol class="answer_list">
	<li> can be created <strong>without</strong> any issues.
	<li> are only allowed when the directory being linked to is an
		ancestor (i.e., occurs in the path of the current location).
	<li> are only allowed when the directory being linked to is a
		decendant (e.g., child, grandchild) of the current directory.
	<li> are <strong>not</strong> allowed since this would create a
		circular structure that wouldn't be freeable later.
	<li> None of the above
	</ol>
</li><br/>
<li> Hard links can be used
	<ol class="answer_list">
	<li> to link to files on the same computer but in a different file
		system.
	<li> to link to remote files on different computer systems.
	<li> only to link to files on the same computer, either in the same
		or a different file system.
	<li> only to link to files within the same physical file system.
	<li> None of the above
	</ol>
</li><br/>
<li> Symbolic (soft) links to files and directories
	<ol class="answer_list">
	<li> can link to files and directories in different file
		systems as well as on different computers.
	<li> can link to non-existent files.
	<li> are allowed to create circular structures (e.g., a directory
		can have itself as its parent/child).
	<li> are automatically deleted when the orignal file/directory is
		removed.
	<li> None of the above
	</ol>
</li><br/>
<li> Absolute path names begin with a
	<ol class="answer_list">
	<li> "./" on both Unix/Linux and Windows systems.
	<li> "../" on both Unix/Linux and Windows systems.
	<li> slash (/) on Unix/Linux systems.
	<li> drive letter (e.g., A:) on a Windows system.
	<li> None of the above
	</ol>
</li><br/>
<li> Relative path names specify the location of a file or directory
	<ol class="answer_list">
	<li> starting from the current working directory.
	<li> with respect to the root directory of the file system.
	<li> relative to the user's home directory.
	<li> starting from the directory where the program requesting the
		file is located.
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to create a new directory?
	<ol class="answer_list">
	<li> new
	<li> mkdir
	<li> dir
	<li> create
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to delete an existing directory?
	<ol class="answer_list">
	<li> remove
	<li> delete
	<li> rmdir
	<li> free
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to open a directory for examination?
	<ol class="answer_list">
	<li> find
	<li> stat
	<li> examine
	<li> opendir
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to close a directory and ensure that any
	changes to it are written back to the disk?
	<ol class="answer_list">
	<li> closedir
	<li> flush
	<li> finish
	<li> done
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to change the name of a directory?
	<ol class="answer_list">
	<li> move
	<li> rename
	<li> chname
	<li> chmod
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to create a new directory entry for an existing
	file?
	<ol class="answer_list">
	<li> add2dir
	<li> direntry
	<li> link
	<li> new
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to remove the directory entry for a file?
	<ol class="answer_list">
	<li> rmfile
	<li> delete
	<li> free
	<li> unlink
	<li> None of the above
	</ol>
</li><br/>
<li> Which POSIX call is used to change the current working directory?
	<ol class="answer_list">
	<li> pwd
	<li> chdir
	<li> cd
	<li> go2dir
	<li> None of the above
	</ol>
</li><br/>
<li> The key difference(s) between hard links and soft/symbolic links are that
	<ol class="answer_list">
	<li> soft links allow files to be accessed randomly while hard linked
		files are limited to sequential access. 
	<li> soft links are implemented by software but hard links require
		hardware support to be implemented.
	<li> hard links point to a physical (disk) location while soft links
		give the "directions" (i.e., path) to the linked file.
	<li> hard links provide copy on write semantics whereas symbolic links
		do <strong>not</strong>.
	<li> None of the above
	</ol>
</li><br/>
<li> Deleting a soft link
	<ol class="answer_list">
	<li> <strong>always</strong> deletes the file that the link pointed to.
	<li> will delete the file the link points to, but only if the file
		is located on the same file system as the link.
	<li> will delete the file the link points to, but only if this is
		the last soft link to the file.
	<li> <strong>never</strong> deletes the file that the link pointed to.
	<li> None of the above
	</ol>
</li><br/>
<li> Deleting a hard link
	<ol class="answer_list">
	<li> <strong>always</strong> deletes the file that the link pointed to.
	<li> will delete the file the link points to, but only if the file
		is located on the same file system as the link.
	<li> will delete the file the link points to, but only if this is
		the last hard link to the file.
	<li> <strong>never</strong> deletes the file that the link pointed to.
	<li> None of the above
	</ol>
</li><br/>
<li> Soft links can point to files
	<ol class="answer_list">
	<li> but only when there's <strong>not</strong> another soft link
		already pointing to them.
	<li> but only when there's <strong>not</strong> a hard link already
		pointing to them.
	<li> that don't actually exist.
	<li> on different file systems.
	<li> None of the above
	</ol>
</li><br/>
<li> Hard links can point to files
	<ol class="answer_list">
	<li> but only when there's <strong>not</strong> a soft link already
		pointing to them.
	<li> but only when there's <strong>not</strong> another hard link
		already pointing to them.
	<li> that don't actually exist.
	<li> on different file systems.
	<li> None of the above
	</ol>
</li><br/>

<li> File systems are
	<ol class="answer_list">
	<li> <strong>all</strong> very similar with the few differences
		between them of little importance.
	<li> nearly always stored on disk (either HDD or SSD).
	<li> dedicated to the OS, with each OS supporting only a single
		file system.
	<li> generally contained within a single disk partition (if stored on
		a disk).
	<li> None of the above
	</ol>
</li><br/>
<li> A disk (either HDD or SSD) has
	<ol class="answer_list">
	<li> a single Master Boot Record (MBR).
	<li> one or more partitions.
	<li> a boot block for each partition.
	<li> a partition table (stored at the end of the MBR).
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are <strong>not</strong> steps in the boot process?
	<ol class="answer_list">
	<li> the BIOS identifies the boot device and ensures it's attached.
	<li> the program in the Master Boot Record (MBR) is loaded and run.
	<li> the MBR program loads and runs the code in the first block of the
		active partition.
	<li> the boot block program loads the OS from the active partition.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are <strong>not</strong> part of every disk
	partition?
	<ol class="answer_list">
	<li> Root directory
	<li> Boot block
	<li> Superblock
	<li> Master Boot Record (MBR)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are <strong>not</strong> a basic technique for
	implementing files?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which file implementation technique stores the file in consecutive disk
	blocks, so that only the last block has any wasted space?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which file implementation technique uses the first word of each block
	(or alternately a separate table representing those words) to indicate
	the disk block holding the next portion of the file?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which file implementation technique only requires the location of the
	first disk block and the number of disk blocks allocated for the file
	in order to access it?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which file implementation technique uses a single data structure that
	stores standard metadata along with direct and indirect pointers to
	the file blocks containing the file data?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file implementation techniques suffers from
	external fragmentation if files can be removed or modified?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file implementation techniques completely
	avoid any internal fragmentation?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> File Allocation Tables are an aspect of which of the following file
	implementation techniques?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file implementation techniques has the
	<strong>best</strong> support for random access?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> Linked List Allocation
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which file system implementation is suitable for smaller disks
	but is less suitable as the size of the disk grows larger?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> File Allocation Table (FAT)
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> An advantage that i-nodes have over FAT file systems is that
	<ol class="answer_list">
	<li> they have better performance for randomly accessing files.
	<li> they have less external fragmentation.
	<li> they have less internal fragmentation.
	<li> only direct and indirect links to the disk blocks for the desired
		file (and no other files) are needed in memory.
	<li> None of the above
	</ol>
</li><br/>
<li> ISO 9660 was developed for use by compact disks (for music) and later
	DVDs (for movies). Which file system implementation approach is
	ISO 9660 an example of?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Superblock Allocation
	<li> File Allocation Table (FAT)
	<li> Spiral Allocation
	<li> Index-nodes
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are <strong>not</strong> a commonly used technique
	for storing file/directory names in directory entries?
	<ol class="answer_list">
	<li> Use a fixed amount of space for the name (e.g., 8.3 names).
	<li> Allocate the string for the name from heap storage and put the
		pointer in the directory entry.
	<li> Allow directory entries to be variable in length with the file
		name appearing at the end of the entry.
	<li> Each directory entire has a pointer into a shared string space
		for storing <strong>all</strong> the names in that directory.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are true about the root directory of a file
	system?
	<ol class="answer_list">
	<li> It's the only file/directory <strong>without</strong> a name.
	<li> Both hard and soft links to the root directory are
		<strong>not</strong> allowed.
	<li> The root is stored in the boot block of the file system partition.
	<li> A pointer to it <strong>must</strong> be kept in a known/standard
		location.
	<li> None of the above
	</ol>
</li><br/>
<li> The attributes associated with a file (or directory) are
	<ol class="answer_list">
	<li> <strong>always</strong> stored in its directory entry.
	<li> are stored in the directory entry for contiguous and linked list
		file allocations.
	<li> are stored in the file's (or directory's) i-node if index-nodes
		are used for file allocation.
	<li> <strong>never</strong> stored in its directory entry.
	<li> None of the above
	</ol>
</li><br/>
<li> As the number of directory entries increases (e.g., >= 100),
	<ol class="answer_list">
	<li> searching for a file (or directory) name may get slower if a
		hash table isn't used.
	<li> the i-nodes used (for an index-node implementation) increases
		faster than the number of files in the directory.
	<li> space within the directory (itself a special file) is likely
		to become exhausted.
	<li> the file system as a whole becomes slower to access.
	<li> None of the above
	</ol>
</li><br/>
<li> Soft links are slower to access a file than hard links because
	<ol class="answer_list">
	<li> every file system on the disk (in different partitions)
		<strong>must</strong> be checked for the file.
	<li> hard links point directly to the file (e.g., via its
		i-node number). 
	<li> the linked file is <strong>always</strong> specified as an
		absolute path.
	<li> they require visiting (multiple) other directories along the
		indicated file path to find the linked file.
	<li> None of the above
	</ol>
</li><br/>
<li> Copying soft links can be problematic because
	<ol class="answer_list">
	<li> there are two ways to copy them, making a copy of the link or
		making a copy of the file the link points to.
	<li> the link may point to another file system, and copies across
		file systems cannot be done.
	<li> the resulting copy will <strong>always</strong> be a soft link.
	<li> they can sometimes be mistaken for a hard link by the OS.
	<li> None of the above
	</ol>
</li><br/>
<li> Log structure files buffer writes, to a hard disk disk (HDD), in memory
	<ol class="answer_list">
	<li> improving the write efficiency to the disk while reducing wait
		time for processes writing to disk.
	<li> thus preventing file system problems if a system failure occurs.
	<li> but this increases the risk that information will be lost if a
		system failure occurs.
	<li> because file system operations generally require many small writes
		to the HDD, so bundling them together improves efficiency.
	<li> None of the above
	</ol>
</li><br/>
<li> Log structure files
	<ol class="answer_list">
	<li> keep a complete record of <strong>all</strong> writes that have
		ever been made to a disk drive.
	<li> are becoming increasingly important to have as solid state disks
		(SSDs) become more common.
	<li> are becoming less necessary as hard disk drives (HDDs) are replaced
		with solid state disks (SSDs).
	<li> have a special process that regularly "cleans" and compacts them
		(as some items in the log are no longer needed as time passes).
	<li> None of the above
	</ol>
</li><br/>
<li> Journaling file systems are used to
	<ol class="answer_list">
	<li> improve the write efficiency to the disk.
	<li> prevent file system problems if a system failure occurs.
	<li> enable access to remote file systems.
	<li> create an up-to-date backup of a file system, so that it can be
		restored in the case of a disk failure/crash.
	<li> None of the above
	</ol>
</li><br/>
<li> A journaling file system keeps a log of actions to be performed
	<ol class="answer_list">
	<li> to improve the write efficiency to the disk.
	<li> removing them only after their completion has been confirmed.
	<li> but each action <strong>must</strong> be <em>idempotent</em> in
		case there are multiple system crashes.
	<li> to create an up-to-date backup of a file system, so that it can be
		restored in the case of a disk failure/crash.
	<li> None of the above
	</ol>
</li><br/>
<li> An <em>idempotent</em> operation is one that
	<ol class="answer_list">
	<li> makes an atomic change to disk (i.e., either the entire operation
		completes or none of it does).
	<li> <strong>always</strong> runs from within a critical section.
	<li> is <strong>not</strong> critical, so that if it
		<strong>never</strong> gets performed it's okay.
	<li> <strong>must</strong> be executed <em>exactly</em> once
		(e.g., making a deposit to a bank account). 
	<li> None of the above
	</ol>
</li><br/>
<li> A virtual file system
	<ol class="answer_list">
	<li> implements both journaling and log file structures, improving
		both efficiency and safety.
	<li> enables multiple file systems to be seamless integrated so that
		they appear as a single file system.
	<li> provides access to file systems on remote computers.
	<li> ensures that both soft and hard links can be used across file
		systems.
	<li> None of the above
	</ol>
</li><br/>
<li> A virtual file system
	<ol class="answer_list">
	<li> does <strong>not</strong> actually store files itself, but
		interfaces with multiple other file systems.
	<li> stores files on disks that are shared among multiple computer
		systems.
	<li> provides access to file systems on remote computers.
	<li> ensures that both soft and hard links can be used across file
		systems.
	<li> None of the above
	</ol>
</li><br/>

<li> Most file systems do <strong>not</strong> store files in contiguous disk
	blocks because
	<ol class="answer_list">
	<li> this makes the file system design and implementation simpler.
	<li> of the delay that the rotational latency of a HDD requires when
		the disk blocks are next to one another.
	<li> it reduces the amount of internal fragmentation.
	<li> files tend to grow in size, requiring the disk blocks for the 
		file to be copied.
	<li> None of the above
	</ol>
</li><br/>
<li> For the same size disk, larger disk block sizes tend to
	<ol class="answer_list">
	<li> improve the data transfer rate to and from disk.
	<li> reduce internal fragmentation.
	<li> reduce the number of blocks needed to store a file.
	<li> decrease the amount of storage need to keep track of bad disk
		blocks.
	<li> None of the above
	</ol>
</li><br/>
<li> It's not uncommon, particularly for hard disk drives (HDDs), for disk
	blocks to become bad. To avoid using them, bad blocks are
	<ol class="answer_list">
	<li> tracked by the controller in a list stored in a pre-specified
		disk location.
	<li> filled with a special value to identify them.
	<li> moved to another location on the disk.
	<li> removed from the list of free blocks.
	<li> None of the above
	</ol>
</li><br/>
<li> The free (unused) blocks on a disk are often tracked by
	<ol class="answer_list">
	<li> moving the used blocks to the lower disk block numbers (i.e.,
		compacting) and keeping a single number which is the lowest
		disk number of the set of contiguous free blocks.
	<li> exchanging (copying) free blocks and used blocks (as a
		background process) to combine the free blocks into a small
		number of contiguous areas.
	<li> keeping a linked list of blocks, with each block in the list
		pointing to a large number of free blocks.
	<li> using a bit map contained in 1 or more blocks, with bits
		having either a value of 1 (used) or 0 (free).
	<li> None of the above
	</ol>
</li><br/>
<li> Disk quotas are a mechanism to prevent
	<ol class="answer_list">
	<li> account holders from using more than their "fair share"
		of the file system space.
	<li> disk failure due to overuse.
	<li> the inadvertent loss of files due to user error.
	<li> a disk from filling up.
	<li> None of the above
	</ol>
</li><br/>
<li> A disk quota can be used to limit the total
	<ol class="answer_list">
	<li> amount of space on the disk.
	<li> amount of disk space a user's files take up.
	<li> number of swap areas (and thus processes) that can exist. 
	<li> number of files a user has.
	<li> None of the above
	</ol>
</li><br/>
<li> A disk quota soft limit
	<ol class="answer_list">
	<li> warns the user when they are getting close to their hard limit.
	<li> prevents the creation of new files when exceeded, but allows
		existing files to be appended to.
	<li> restricts the number of executable files (software) that the
		user has.
	<li> indicates the maximum number of soft links that the user can
		have.
	<li> None of the above
	</ol>
</li><br/>
<li> A disk quota hard limit
	<ol class="answer_list">
	<li> is the maximum amount of space (or number of files) a user is
		permitted to have.
	<li> applies only to hard disk drives (HDDs).
	<li> can prevent a user from saving their work, if reached.
	<li> indicates the maximum number of hard links that the user can
		have.
	<li> None of the above
	</ol>
</li><br/>
<li> The primary types of file system backups are
	<ol class="answer_list">
	<li> physical dump.
	<li> traditional dump.
	<li> logical dump.
	<li> virtual dump.
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of file system dump is fast and simple to implement, but
	can't do incremental backups or restore select files?
	<ol class="answer_list">
	<li> physical dump.
	<li> traditional dump.
	<li> logical dump.
	<li> virtual dump.
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of file system dump can restore select files and dump only
	changed files and directories, but is slower and more complex to
	implement?
	<ol class="answer_list">
	<li> physical dump.
	<li> traditional dump.
	<li> logical dump.
	<li> virtual dump.
	<li> None of the above
	</ol>
</li><br/>
<li> A <em>full backup</em> is
	<ol class="answer_list">
	<li> taken when a file system is full, so it can be stored off-site.
	<li> a complete copy of the current state of the file system.
	<li> done when each user has reached their disk quota soft limit.
	<li> done when each user has reached their disk quota hard limit.
	<li> None of the above
	</ol>
</li><br/>
<li> An <em>incremental backup</em> is
	<ol class="answer_list">
	<li> frequently used because it takes less space and finishes more
		quickly than a full backup.
	<li> created whenever a user reaches their disk quota soft limit.
	<li> used to make copies of only those files (and directories) that
		have changed since the last backup.
	<li> performed automatically by the file system on a periodic basis.
	<li> None of the above
	</ol>
</li><br/>
<li> Keeping file system backups on-site is
	<ol class="answer_list">
	<li> preferred as this makes it easier and faster to restore user files.
	<li> <strong>never</strong> a good idea since a single problem
		(e.g., tornado) can cause a loss of both the file system
		(on disks) and its backup.
	<li> no better or worse than keeping them off-site.
	<li> necessary only if the backup is made to other disks in near
		real-time.
	<li> None of the above
	</ol>
</li><br/>
<li> For an i-node based file system, which type of check recursively
	traverses a directory keeping a count for each i-node of the number
	of references to that i-node?
	<ol class="answer_list">
	<li> OS consistency check
	<li> File consistency check
	<li> Block consistency check
	<li> I-node check
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of check uses two counters per disk block to count the number
	of times they are pointed to by either an i-node (1st counter) or
	from the free list (2nd counter)?
	<ol class="answer_list">
	<li> OS consistency check
	<li> File consistency check
	<li> Block consistency check
	<li> I-node check
	<li> None of the above
	</ol>
</li><br/>
<li> The i-node counts created by a file consistency check should
	<ol class="answer_list">
	<li> equal the i-node reference counts.
	<li> sum to the total number of disk blocks.
	<li> equal the count of the number of free blocks.
	<li> <strong>never</strong> be greater than 1.
	<li> None of the above
	</ol>
</li><br/>
<li> After a block consistency check has created its counts corresponding to
	the number of times the block is used or appears in the free list
	respectively, a problem exists if
	<ol class="answer_list">
	<li> both counts are 0.
	<li> if the sum of the two counts = 1.
	<li> both counts are >= 1.
	<li> either count is > 1.
	<li> None of the above
	</ol>
</li><br/>
<li> To improve the performance of a file system, particularly those stored on
	HDDs,
	<ol class="answer_list">
	<li> the disk block size should be kept small (e.g., 1 KB) to reduce
		internal fragmentation.
	<li> a block cache should keep a number of disk blocks in memory to
		reduce read times.
	<li> changes to a file's disk block that's been loaded into memory,
		should <strong>not</strong> be written back to disk after
		every change.
	<li> Perform a regular incremental backup. 
	<li> None of the above
	</ol>
</li><br/>
<li> Pre-fetching the next few disk blocks for a file, can improve the
	performance for which type of file access (particularly on HDDs)?
	<ol class="answer_list">
	<li> Random access.
	<li> Spiral access.
	<li> Sequential access.
	<li> Tree access.
	<li> None of the above
	</ol>
</li><br/>
<li> Part of the advantage of caching disk blocks in memory is to reduce
	the total number of writes to disk (i.e., make several changes to the
	cache before writing the cached block back to disk), what if any
	advantage is there to having a cache that writes through
	to the disk every time the cache is changed?
	<ol class="answer_list">
	<li> In the event of a system failure, write-through-caches can reduce
		the amount of lost data.
	<li> All writes to disk <strong>must</strong> come from memory/cache
		anyway, so there is no difference in write performance.
	<li> The write-through-cache also provides the faster read access.
	<li> Using a write-through-cache lowers contention on the system bus
		since the disk block is written as soon as it's changed.
	<li> None of the above
	</ol>
</li><br/>
<li> When possible, in order to improve file read/write performance, the free
	blocks allocated to store the contents of a file should be
	<ol class="answer_list">
	<li> randomly distributed on the disk to avoid access contention.
	<li> in the same disk partition.
	<li> one after another (on HDDs) to reduce seek time.
	<li> of the same size.
	<li> None of the above
	</ol>
</li><br/>
<li> The Unix <em>sync</em> and Windows <em>FlushFileBuffers</em> processes
	<ol class="answer_list">
	<li> ensure that the contents of cached disk blocks are written to
		disk periodically when they've been modified. 
	<li> update the contents of any file disk blocks cached in memory
		that might have been altered on disk.
	<li> are unnecessary if write-through caches are
		<strong>always</strong> used.
	<li> only need to be used in combination with a virtual file system.
	<li> None of the above
	</ol>
</li><br/>
<li> Defragmenting a disk
	<ol class="answer_list">
	<li> compacts the file system, placing <strong>all</strong> of the
		free disk blocks at one end of the partition.
	<li> reduces the amount of internal fragmentation.
	<li> can place a file's disk blocks consecutively so as to increase
		read/write access speeds.
	<li> increases the number of free disk blocks available to the file
		system.
	<li> None of the above
	</ol>
</li><br/>
<li> Defragmenting a disk is <em>most</em> useful for which type of file system?
	<ol class="answer_list">
	<li> Contiguous Allocation
	<li> Linked List Allocation
	<li> Index Node
	<li> Virtual File System
	<li> None of the above
	</ol>
</li><br/>

<li> A kilobyte (KB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> A gigabyte (GB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> A megabyte (MB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> A terabyte (TB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> A petabyte (PB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> An exabyte (EB) is how many bytes?
	<ol class="answer_list">
	<li> 2^10
	<li> 2^20
	<li> 2^30
	<li> 2^40
	<li> 2^50
	<li> 2^60
	</ol>
</li><br/>
<li> Which of the following are examples of a contiguous allocation file
	system?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660 with Joliet Extensions
	<li> ISO 9660 with Rock Ridge Extensions
	<li> ext2
	<li> ext4
	<li> Network File System (NFS)
	<li> Virtual File System (VFS)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are examples of a linked list allocation file 
	system?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660 with Joliet Extensions
	<li> ISO 9660 with Rock Ridge Extensions
	<li> ext2
	<li> ext4
	<li> Network File System (NFS)
	<li> Virtual File System (VFS)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are examples of an index-node allocation file 
	system?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660 with Joliet Extensions
	<li> ISO 9660 with Rock Ridge Extensions
	<li> ext2
	<li> ext4
	<li> Network File System (NFS)
	<li> Virtual File System (VFS)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following files systems provide journaling?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660
	<li> ext2
	<li> NTFS
	<li> ext4
	<li> ReFS
	<li> Btrfs
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following files systems support hard links?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660
	<li> ext2
	<li> NTFS
	<li> ext4
	<li> ReFS
	<li> Btrfs
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following files systems support soft links?
	<ol class="answer_list">
	<li> FAT-32
	<li> ISO 9660
	<li> ext2
	<li> NTFS
	<li> ext4
	<li> ReFS
	<li> Btrfs
	<li> None of the above
	</ol>
</li><br/>

<li> File servers enabled the use of inexpensive client machines by
	<ol class="answer_list">
	<li> hosting users' file systems that were remotely connected to by
		the clients.
	<li> providing the vast majority of the computational power,
		displaying the results back to the client (e.g., via X11).
	<li> performing the virtual memory management for the client - thus
		greatly simplifying its hardware.
	<li> treating them as dumb terminals, so that <strong>all</strong> of
		the processing and information display is controlled by the
		server. 
	<li> None of the above
	</ol>
</li><br/>
<li> The purpose of concurrency control, by a file server, is to
	<ol class="answer_list">
	<li> enable files to be locked so that only the process with the
		lock can use the file (until the lock is released).
	<li> allow true simultaneous actions to occur (even on a single
		CPU system).
	<li> achieve serializability, even if operations/actions are
		interruptible.
	<li> ensure that operations are <strong>always</strong> performed
		uninterrupted, by wrapping <strong>all</strong> actions
		inside of critical sections controlled by semaphores. 
	<li> None of the above
	</ol>
</li><br/>
<li> Problems can occur when file data is only partially updated (e.g., due
	to a system failure), as in the case of a bank's transferring money
	from savings to checking. Which of the following ensures that no
	partial updates are performed?
	<ol class="answer_list">
	<li> Serializability
	<li> Transactions
	<li> Concurrency Control
	<li> Replicated Files
	<li> None of the above
	</ol>
</li><br/>
<li> Replicating files as they are modified (copy-on-write) provides a degree of
	<ol class="answer_list">
	<li> concurrency control since each process changing a file gets its own
		copy.
	<li> fault tolerance by making copies of files that can be used if the
		primary server is unavailable.
	<li> atomic transaction protection, by ensuring that
		<strong>all</strong> partial updates fail (though some
		completed updates could also fail).
	<li> performance improvement over in-place modification, since only the
		changed parts of the file need to be copied.
	<li> None of the above
	</ol>
</li><br/>
<li> Transactions are atomic, which requires that
	<ol class="answer_list">
	<li> no actual changes to the file are visible in the file system
		until the transaction is committed.
	<li> <strong>all</strong> transactions which change information
		<strong>must</strong> be kept on a stable store (e.g.,
		phase-change memory) until the transaction is committed.
	<li> file system journaling (or something like it)
		<strong>must</strong> be in place to ensure
		transactions survive file system failures.
	<li> file system log structure files <strong>must</strong> be kept
		to ensure serializability of multiple file system transactions.
	<li> None of the above
	</ol>
</li><br/>
<li> The Network File System (NFS) uses a client-server protocol that works by
	<ol class="answer_list">
	<li> copying requested files from the server to the client and then
		copying them back once the client has finished with them.
	<li> having the server keep track of a file pointer on behalf of the
		client, so when the client makes read/write requests, the
		server knows exactly where in the file to perform the actions.
	<li> providing the client with a file handle that it uses to retrieve
		(read) portions of the file from the server or to request file
		modifications (write) based on file offsets.
	<li> locking the remote file so that only the client has access to it
		while it's being used.
	<li> None of the above
	</ol>
</li><br/>
<li> The Network File System (NFS) uses a client-server protocol
	<ol class="answer_list">
	<li> that is stateless, requiring any requested file modifications be
		committed before the Remote Procedure Call (RPC) returns
		results.
	<li> that is stateless, so that failure of the file server won't
		necessarily impact the client after the file server is
		recovered.
	<li> that is stateful, thus enabling the client to fail and then
		recover <strong>without</strong> impacting any pending file
		transactions.
	<li> that is stateful, making the implementation of NFS much simpler.
	<li> None of the above
	</ol>
</li><br/>
<li> The Network File System (NFS) uses a client-server protocol
	<ol class="answer_list">
	<li> that requires any programs that access remote files to be
		modified and recompiled so that they can use the NFS API.
	<li> that requires any programs that access remote files to be be	
		recompiled so that they can use the NFS version of system
		call implementations (though no program code modifications
		are necessary).
	<li> which is incompatible with the Virtual File System (VFS), thus
		most clients that use NFS are diskless (i.e., they get
		<strong>all</strong> of their files remotely).
	<li> that has no impact on user programs since their file access is
		through the Virtual File System (VFS) of which NFS is just
		one participating file system.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file systems can distribute the information
	from one file system instance across multiple computer systems?
	<ol class="answer_list">
	<li> Network File System (NFS)
	<li> Lustre
	<li> Hadoop
	<li> Btrfs
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following file systems are horizontally scalable (i.e., they
	can handle more files and file operations within the same file system
	instance by adding more computer systems)?
	<ol class="answer_list">
	<li> Network File System (NFS)
	<li> Lustre
	<li> Hadoop
	<li> Btrfs
	<li> None of the above
	</ol>
</li><br/>
<li> The Lustre File System (LFS) uses the metadata server to
	<ol class="answer_list">
	<li> perform pathname and permission checks
	<li> store file information (e.g., filenames, directories, file layout,
		access permissions).
	<li> store the actual file contents.
	<li> store which of its object storage targets holds the various parts
		of the files its responsible for.
	<li> None of the above
	</ol>
</li><br/>
<li> The Lustre File System (LFS) uses the metadata targets to
	<ol class="answer_list">
	<li> perform pathname and permission checks
	<li> store file information (e.g., filenames, directories, file layout,
		access permissions).
	<li> store the actual file contents.
	<li> store which of its object storage targets holds the various parts
		of the files its responsible for.
	<li> None of the above
	</ol>
</li><br/>
<li> The Lustre File System (LFS) uses the object storage target to
	<ol class="answer_list">
	<li> perform pathname and permission checks
	<li> store file information (e.g., filenames, directories, file layout,
		access permissions).
	<li> store the actual file contents.
	<li> store which of its object storage targets holds the various parts
		of the files its responsible for.
	<li> None of the above
	</ol>
</li><br/>
<li> The Lustre File System (LFS) uses the object storage servers to
	<ol class="answer_list">
	<li> perform pathname and permission checks
	<li> store file information (e.g., filenames, directories, file layout,
		access permissions).
	<li> store the actual file contents.
	<li> store which of its object storage targets holds the various parts
		of the files its responsible for.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following Lustre File System (LFS) components is
	implemented as an enhanced version of ext4?
	<ol class="answer_list">
	<li> metadata source
	<li> metadata target
	<li> object storage source
	<li> object storage target
	<li> None of the above
	</ol>
</li><br/>
<li> The Hadoop file system uses
	<ol class="answer_list">
	<li> only 1 namenode.
	<li> 1 or more namenodes.
	<li> only 1 datanode.
	<li> 1 or more datanodes.
	<li> None of the above
	</ol>
</li><br/>
<li> Clients using the Hadoop file system work directly with
	<ol class="answer_list">
	<li> only the namenode(s).
	<li> only the datanode(s).
	<li> both the namenode(s) and datanode(s).
	<li> neither since <strong>all</strong> interactions with Hadoop
		<strong>must</strong> be mediated by the Virtual File System
		(VFS).
	<li> None of the above
	</ol>
</li><br/>
<li> Hadoop datanodes get the file data they are to store
	<ol class="answer_list">
	<li> only from the namenode(s), which gets it from the client.
	<li> only from the client.
	<li> from both the client (1st datanode) and other datanodes.
	<li> from the client, namenode(s), and other datanodes depending on the
		circumstances.
	<li> None of the above
	</ol>
</li><br/>
<li> In Hadoop, the following are responsible for determining how many
	replicates to make of the file data:
	<ol class="answer_list">
	<li> client.
	<li> namenode(s).
	<li> datanode(s).
	<li> both the namenode(s) and datanode(s) via a majority voting
		algorithm.
	<li> None of the above
	</ol>
</li><br/>
<li> In Hadoop, the following are responsible for determining which datanodes
	are to be used for storing the file data:
	<ol class="answer_list">
	<li> client.
	<li> namenode(s).
	<li> datanode(s).
	<li> both the namenode(s) and datanode(s) via a majority voting
		algorithm.
	<li> None of the above
	</ol>
</li><br/>
<li> Hadoop writes files using a block size that is determined by 
	<ol class="answer_list">
	<li> the client.
	<li> the namenode(s).
	<li> the datanode(s).
	<li> both the namenode(s) and datanode(s) via a majority voting
		algorithm.
	<li> None of the above
	</ol>
</li><br/>
<li> When a client wants to access a file stored in Hadoop, it gets the list of
	file blocks and the nodes on which the file data is stored from:
	<ol class="answer_list">
	<li> only the namenode(s).
	<li> only the datanode(s).
	<li> either a namenode(s) or datanode(s) depending upon which is able to
		handle the request first.
	<li> None of the above
	</ol>
</li><br/>
<li> In Hadoop, once a client has the list of blocks and nodes on which the
	file data resides, it retrieves the data by
	<ol class="answer_list">
	<li> asking a namenode to get the file data blocks, assemble them,
		and return them to the client.
	<li> asking a datanode to get the file data blocks, assemble them,
		and return them to the client.
	<li> asking each namenode to get the file blocks from the datanode(s)
		it's responsible for.
	<li> retrieving each of the file data blocks directly from datanode(s).
	<li> None of the above
	</ol>
</li><br/>
<li> What are the three types of failure that can be seen with the Hadoop
	(and Lustre) file systems?
	<ol class="answer_list">
	<li> Client failure.
	<li> Node or target/server failure.
	<li> Communication failure.
	<li> Data corruption.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following remote file systems have at least one single point
	of failure?
	<ol class="answer_list">
	<li> Network File System (NFS)
	<li> Lustre
	<li> Hadoop
	<li> None of the above
	</ol>
</li><br/>
<li> What conditions does Hadoop use to identify network and/or node failures?
	<ol class="answer_list">
	<li> A namenode fails to receive a heartbeat message from a datanode
		for more than 10 minutes.
	<li> A namenode doesn't hear from one of its clients for more than
		10 minutes.
	<li> A datanode reports its unavailability to its namenode.
	<li> A sender <strong>not</strong> receiving an acknowledgement for
		a sent message after several retries.
	<li> None of the above
	</ol>
</li><br/>

<li> The primary kinds of devices are
	<ol class="answer_list">
	<li> character devices.
	<li> linear devices.
	<li> parallel devices.
	<li> block devices.
	<li> None of the above
	</ol>
</li><br/>
<li> What kind of device works with information in fixed size blocks and often
	provides random access?
	<ol class="answer_list">
	<li> character devices.
	<li> linear devices.
	<li> parallel devices.
	<li> block devices.
	<li> None of the above
	</ol>
</li><br/>
<li> What kind of device works with information as a sequence of bytes and
	only provides sequentially access?
	<ol class="answer_list">
	<li> character devices.
	<li> linear devices.
	<li> parallel devices.
	<li> block devices.
	<li> None of the above
	</ol>
</li><br/>
<li> What software interacts with the device controller to enable the OS to
	utilize a device?
	<ol class="answer_list">
	<li> I/O interface
	<li> Device driver
	<li> Interrupt driver
	<li> Control bus
	<li> None of the above
	</ol>
</li><br/>
<li> The primary nature of an I/O device is
	<ol class="answer_list">
	<li> mechanical and based on material properties. 
	<li> electronic (circuits).
	<li> software.
	<li> None of the above
	</ol>
</li><br/>
<li> The primary nature of an device controller is
	<ol class="answer_list">
	<li> mechanical and based on material properties. 
	<li> electronic (circuits).
	<li> software.
	<li> None of the above
	</ol>
</li><br/>
<li> The primary nature of an device driver is
	<ol class="answer_list">
	<li> mechanical and based on material properties. 
	<li> electronic (circuits).
	<li> software.
	<li> None of the above
	</ol>
</li><br/>
<li> Each device controller
	<ol class="answer_list">
	<li> controls only a single device.
	<li> may control many devices.
	<li> communicates with its corresponding device driver.
	<li> <strong>must</strong> have its own dedicated bus to both the CPU
		and the Direct Memory Access (DMA) controller.
	<li> None of the above
	</ol>
</li><br/>
<li> Devices controllers have
	<ol class="answer_list">
	<li> support for <strong>all</strong> types of devices, so that any
		device can utilize any type of device controller.
	<li> data buffers that can be written to or read from.
	<li> control registers to communicate with the CPU.
	<li> their own instruction sets that <strong>must</strong> be
		supported by the CPU.
	<li> None of the above
	</ol>
</li><br/>
<li> Port I/O, used by early computers,
	<ol class="answer_list">
	<li> assigns each control register to its corresponding I/O port.
	<li> is very slow since large data transfers <strong>must</strong>
		be done by reading/writing data in many small chunks (using
		the control registers).
	<li> the I/O ports are separate from memory (requiring protected
		instructions to read/write the I/O ports).
	<li> requires some portion of the device drivers to be written in
		assembly.
	<li> cannot use device drivers as the OS kernel <strong>must</strong>
		directly control the device.
	<li> None of the above
	</ol>
</li><br/>
<li> The advantages of Memory-Mapped I/O are
	<ol class="answer_list">
	<li> reduces the number of CPU executed instructions to put information
		into control registers.
	<li> ease of protecting the control registers by <strong>not</strong>
		putting the mapped memory in a user accessible address space.
	<li> data can be read/written directly to the device since the device
		buffer is mapped to memory.
	<li> device drivers can be written in a higher-level language (e.g.,
		C) enabling them to be more portable.
	<li> it makes effective use of both cached memory and the memory bus
		between main memory and the CPU.
	<li> None of the above
	</ol>
</li><br/>
<li> The drawbacks of Port I/O include:
	<ol class="answer_list">
	<li> very slow transfers of large data amounts since they
		<strong>must</strong> read/write data in many small chunks
		(using the control registers).
	<li> the device controller data buffers cannot be utilized.
	<li> increases the number of CPU executed instructions to communicate
		with the device controller.
	<li> access to the control registers <strong>must</strong> be
		restricted/protected.
	<li> None of the above
	</ol>
</li><br/>
<li> The drawbacks of Memory-Mapped I/O include:
	<ol class="answer_list">
	<li> caching <strong>must</strong> be disabled for memory mapped
		control registers.
	<li> the device controller data buffers cannot be utilized.
	<li> increases the number of CPU executed instructions to communicate
		with the device controller.
	<li> the MMU <strong>must</strong> determine which bus to use
		(based on the address) if there's a dedicated bus between
		the CPU and main memory in addition to the system bus. 
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following uses the CPU to copy data into (or out of) memory
	from a device (e.g., HDD) using a tight read/write loop?
	<ol class="answer_list">
	<li> Programmed I/O
	<li> Memory-Mapped I/O
	<li> Device to Device copy (D2D)
	<li> Direct Memory Access (DMA)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following has the CPU setup and initiate the copying of
	data into (or out of) memory, but the CPU is free to do other actions
	while the copying occurs?
	<ol class="answer_list">
	<li> Programmed I/O
	<li> Memory-Mapped I/O
	<li> Device to Device copy (D2D)
	<li> Direct Memory Access (DMA)
	<li> None of the above
	</ol>
</li><br/>
<li> If a system has a Direct Memory Access (DMA) capability, the process of
	writing a particular set of data directly to memory (or a device),
	instead of going through the DMA, is called
	<ol class="answer_list">
	<li> burst mode.
	<li> direct mode.
	<li> fly-by mode.
	<li> cycle stealing.
	<li> None of the above
	</ol>
</li><br/>
<li> When the Direct Memory Access (DMA) transfers a chunk of data a single
	word at a time, by grabbing the system bus for short periods of time,
	this is called
	<ol class="answer_list">
	<li> burst mode.
	<li> direct mode.
	<li> fly-by mode.
	<li> cycle stealing.
	<li> None of the above
	</ol>
</li><br/>
<li> When the Direct Memory Access (DMA) transfers a chunk of data
	<strong>all</strong> at once, this is called
	<ol class="answer_list">
	<li> burst mode.
	<li> direct mode.
	<li> fly-by mode.
	<li> cycle stealing.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following makes efficient use of the system bus when large
	amounts of data <strong>must</strong> be transferred by the
	Direct Memory Access (DMA) unit?
	<ol class="answer_list">
	<li> burst mode.
	<li> direct mode.
	<li> fly-by mode.
	<li> cycle stealing.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following makes efficient use of both the CPU and system bus
        when a single word of data <strong>must</strong> be
        transferred by the Direct Memory Access (DMA) unit?
	<ol class="answer_list">
	<li> burst mode.
	<li> direct mode.
	<li> fly-by mode.
	<li> cycle stealing.
	<li> None of the above
	</ol>
</li><br/>
<li> Device controllers generate interrupts by
	<ol class="answer_list">
	<li> writing specific values to the control registers.
	<li> having the CPU periodically check/ping each controller.
	<li> using the Direct Memory Access (DMA) unit to write a special
		value into a variable the OS kernel monitors.
	<li> putting a specific signal on the system bus.
	<li> None of the above
	</ol>
</li><br/>
<li> An interrupt is serviced only if
	<ol class="answer_list">
	<li> no other interrupts are currently being handled.
	<li> there's no process currently running in the CPU.
	<li> no higher-priority interrupts are simultaneously received.
	<li> the system bus is currently operating in direct mode.
	<li> None of the above
	</ol>
</li><br/>
<li> The value that the interrupt controller puts on the system bus address
	lines represents
	<ol class="answer_list">
	<li> an index into the interrupt vector.
	<li> the priority of the interrupt.
	<li> the time-stamp of when the interrupt occurred.
	<li> the beginning address of the interrupt handler.
	<li> None of the above
	</ol>
</li><br/>
<li> The interrupt vector is an array that holds
	<ol class="answer_list">
	<li> the priorities of the different kinds of interrupts (the
		interrupt number used as the array index).
	<li> a list of the currently pending interrupts as a queue.
	<li> references to the set of control registers associated with
		the device that generates that interrupt (the interrupt
		number is used as the array index). 
	<li> the beginning address of the interrupt handler for
		<strong>all</strong> possible interrupts (the interrupt number
		is used as the array index).
	<li> None of the above
	</ol>
</li><br/>
<li> When the interrupt controller handles an interrupt it 
	<ol class="answer_list">
	<li> interrupts the CPU.
	<li> prompts the CPU to save the state of the current process
		<em>before</em> running the interrupt handler.
	<li> restores the state of the previous process to the CPU
		<em>after</em> the interrupt handler finishes.
	<li> runs the next process from the ready "queue"
		<em>after</em> the interrupt handler finishes.
	<li> None of the above
	</ol>
</li><br/>
<li> Interrupts for which the instructions <em>before</em> the program counter
	(PC) have <strong>all</strong> been completed and those
	appearing <em>after</em> the PC have NOT been completed, are called
	<ol class="answer_list">
	<li> precision interrupts.
	<li> precise interrupts.
	<li> imprecise interrupts.
	<li> ambiguous interrupts.
	<li> None of the above
	</ol>
</li><br/>
<li> Interrupts for which some instructions <em>before</em> the PC may NOT
	have completed, while some instructions <em>after</em> the PC may
	been have completed, are called
	<ol class="answer_list">
	<li> precision interrupts.
	<li> precise interrupts.
	<li> imprecise interrupts.
	<li> ambiguous interrupts.
	<li> None of the above
	</ol>
</li><br/>

<li> Which of the following are <strong>not</strong> goals of I/O software?
	<ol class="answer_list">
	<li> Handling errors at the lowest level possible.
	<li> Making programs independent of the actual device(s) used.
	<li> Supporting device names that are independent of the actual
		device(s) used.
	<li> When practical, using buffering for block device communications.
	<li> None of the above
	</ol>
</li><br/>
<li> Asynchronous I/O 
	<ol class="answer_list">
	<li> can be made to look synchronous by the OS.
	<li> is often easier to program with.
	<li> is generally enabled by Direct Memory Access (DMA).
	<li> typically enables other actions to be performed while the I/O
		is occurring.
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O uses the CPU to directly perform the reading/writing of
	data to/from devices?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O is the simplest in design, but prevents the CPU from
	doing other work while I/O is occurring?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O may require the copying of data from a user's address
	space to the kernel address space?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O often reads/writes data from/to a device a single
	byte at a time using a tight loop run by the CPU?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O software uses polling to determine whether or not
	a device is ready for the piece of data to be read/written?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O blocks the reading/writing process so that no time is
	spent busy waiting?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of I/O makes the most efficient use of the CPU resource when
	large chunks of data <strong>must</strong> be read/written?
	<ol class="answer_list">
	<li> Directed I/O
	<li> Programmed I/O
	<li> Interrupt-Driven I/O
	<li> I/O via DMA
	<li> None of the above
	</ol>
</li><br/>

<li> Which of the following are part of the 4 layers of I/O software?
	<ol class="answer_list">
	<li> Device controller firmware
	<li> Interrupt handlers
	<li> Device drivers
	<li> User level I/O software
	<li> None of the above
	</ol>
</li><br/>
<li> An easy and efficient way to deal with I/O interrupts from devices is to
	<ol class="answer_list">
	<li> <strong>always</strong> use Direct Memory Access (DMA) for I/O
		so that interrupts aren't generated.
	<li> have the device driver block when I/O is initiated, so the
		interrupt handler simply unblocks the driver when the interrupt
		is received.
	<li> let the device driver run as part of the OS so that a full
		context switch isn't necessary when an interrupt unblocks a
		device driver.
	<li> combine the interrupt handler and device driver into a single
		user level system call so that <strong>all</strong> parts of
		the I/O software stack are run as a single unit.
	<li> None of the above
	</ol>
</li><br/>
<li> Device driver code, particularly in the consumer market, is most commonly
	<ol class="answer_list">
	<li> installed on the device controller.
	<li> compiled into the OS.
	<li> dynamically loaded into the OS.
	<li> no longer needed as all device manufacturers are moving to a
		single standard API.
	<li> None of the above
	</ol>
</li><br/>
<li> The device dependent code for performing I/O resides in which I/O software
	layer(s)?
	<ol class="answer_list">
	<li> Device controller firmware
	<li> Interrupt handlers
	<li> Device drivers
	<li> User level I/O software
	<li> None of the above
	</ol>
</li><br/>
<li> Devices drivers are
	<ol class="answer_list">
	<li> normally provided by the device manufacturer, but usually only
		for the most popular OSs.
	<li> <strong>always</strong> written to block during an I/O operation.
	<li> often run as part of the OS kernel, to avoid the overhead of a
		full context switch.
	<li> coded using static variables to reduce the size of the run-time
		stack, since the device driver only services one request at
		a time.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following help make I/O software independent of the specific
	device being used?
	<ol class="answer_list">
	<li> Using file names as the names for devices.
	<li> Controlling access to devices through file ownership and access
		permissions.
	<li> Adherence to a common and uniform Application Programming
		Interface (API).
	<li> Enable user programs, via system calls, to access specialized
		features of devices via manufacturer specific control codes.
	<li> None of the above
	</ol>
</li><br/>
<li> Device independent capabilities generally include mechanisms to control:
	<ol class="answer_list">
	<li> interrupt delay and timeouts.
	<li> buffering.
	<li> error reporting.
	<li> device acquisition and release.
	<li> the device data block size.
	<li> None of the above
	</ol>
</li><br/>
<li> Spooling (simultaneous peripheral operations on-line) is a technique that
	<ol class="answer_list">
	<li> uses buffering to prevent slow devices (e.g., printers) from
		making the CPU busy wait.
	<li> allows non-shareable devices to be used serial, but appear to
		user software as if they are being shared.
	<li> is only used in conjunction with printing devices.
	<li> uses a single program to operate a non-shareable device.
	<li> None of the above
	</ol>
</li><br/>
<li> System calls (e.g., read, write) and library routines (e.g., fprintf)
	are provided by which I/O software layer.
	<ol class="answer_list">
	<li> Device controller firmware
	<li> Interrupt handlers
	<li> Device drivers
	<li> User level I/O software
	<li> None of the above
	</ol>
</li><br/>

<li> RAID systems rely on using multiple disks in order to
	<strong>always</strong> be able to
	<ol class="answer_list">
	<li> recover from a single disk failure.
	<li> determine whether or not a (single bit) error has occured (e.g.,
		corrupted data on one of the disks).
	<li> detect and correct a (single bit) error (e.g., corrupted data on
		one of the disks).
	<li> provide faster read and write performance based on data stripping.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following RAID levels support faster data access by using data
	stripping?
	<ol class="answer_list">
	<li> Level 0
	<li> Level 1
	<li> Level 2
	<li> Level 3
	<li> Level 4
	<li> Level 5
	<li> Level 6
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following RAID levels support faster read performance without
	the use of stripping?
	<ol class="answer_list">
	<li> Level 0
	<li> Level 1
	<li> Level 2
	<li> Level 3
	<li> Level 4
	<li> Level 5
	<li> Level 6
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following RAID levels support detection of at least one
	drive/bit error?
	<ol class="answer_list">
	<li> Level 0
	<li> Level 1
	<li> Level 2
	<li> Level 3
	<li> Level 4
	<li> Level 5
	<li> Level 6
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following RAID levels support the correction (or recovery)
	of data when two drives fail simultaneously?
	<ol class="answer_list">
	<li> Level 0
	<li> Level 1
	<li> Level 2
	<li> Level 3
	<li> Level 4
	<li> Level 5
	<li> Level 6
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following RAID levels only require modifications to
	one drive for a write operation?
	<ol class="answer_list">
	<li> Level 0
	<li> Level 1
	<li> Level 2
	<li> Level 3
	<li> Level 4
	<li> Level 5
	<li> Level 6
	<li> None of the above
	</ol>
</li><br/>
<li> RAID implemented in software is
	<ol class="answer_list">
	<li> typically more expensive than hardware RAID implementations.
	<li> <strong>always</strong> able to support the OS boot process. 
	<li> about the same speed as hardware RAID implementations.
	<li> provided by many OSs.
	<li> None of the above
	</ol>
</li><br/>
<li> RAID implemented in hardware is
	<ol class="answer_list">
	<li> typically more expensive than software RAID implementations.
	<li> <strong>always</strong> able to support the OS boot process. 
	<li> generally faster than software RAID implementations.
	<li> commonly found on most consumer/commodity computer systems.
	<li> None of the above
	</ol>
</li><br/>

<li> On a keyboard, an interrupt is generated
	<ol class="answer_list">
	<li> only when a key is pressed.
	<li> only when a key is released.
	<li> every N milliseconds (as configured by the device driver) for as
		long as the key is held down.
	<li> once when the key is pressed, and once when it is released.
	<li> None of the above
	</ol>
</li><br/>
<li> A device driver for supporting keyboards that passes along every typed
	character (including backspacing) supports input in
	<ol class="answer_list">
	<li> canonical mode.
	<li> non-canonical mode.
	<li> half-duplex mode.
	<li> full-duplex mode.
	<li> None of the above
	</ol>
</li><br/>
<li> Which device driver mode for supporting keyboards works
	<strong>best</strong> for full screen editors (e.g., vi, emacs)?
	<ol class="answer_list">
	<li> canonical mode.
	<li> non-canonical mode.
	<li> half-duplex mode.
	<li> full-duplex mode.
	<li> None of the above
	</ol>
</li><br/>
<li> Which device driver mode for supporting keyboards works
	<strong>best</strong> for command line programs (e.g., shell)?
	<ol class="answer_list">
	<li> canonical mode.
	<li> non-canonical mode.
	<li> half-duplex mode.
	<li> full-duplex mode.
	<li> None of the above
	</ol>
</li><br/>
<li> The device driver approach for supporting keyboards that is character
	oriented is also called
	<ol class="answer_list">
	<li> canonical mode.
	<li> non-canonical mode.
	<li> half-duplex mode.
	<li> full-duplex mode.
	<li> raw mode.
	<li> cooked mode.
	<li> None of the above
	</ol>
</li><br/>
<li> The device driver approach for supporting keyboards that is line
	oriented is also called
	<ol class="answer_list">
	<li> canonical mode.
	<li> non-canonical mode.
	<li> half-duplex mode.
	<li> full-duplex mode.
	<li> raw mode.
	<li> cooked mode.
	<li> None of the above
	</ol>
</li><br/>
<li> For a mouse, an interrupt is generated
	<ol class="answer_list">
	<li> each time a button is pressed.
	<li> each time a button is released.
	<li> every 40 milliseconds (as configured by the device driver)
		regardless of what the user does with the mouse.
	<li> whenever the mouse has traveled a predetermined minimum distance.
	<li> None of the above
	</ol>
</li><br/>
<li> Mouse input, unlike keyboard input, 
	<ol class="answer_list">
	<li> only supports raw mode.
	<li> only supports cooked mode.
	<li> supports both raw and cooked modes.
	<li> doesn't support either raw or cooked modes, but uses echoing
		instead. 
	<li> None of the above
	</ol>
</li><br/>
<li> While touch screens operate much the same way that mice do, a notable
	difference is that
	<ol class="answer_list">
	<li> mice have button(s) that can be pressed and released, whereas
		touch screens do <strong>not</strong> have a comparable
		capability.
	<li> mice suffer fromm the ghosting problem, whereas touch screens
		do <strong>not</strong>.
	<li> touch screens supply the absolute position of a touch instead of
		the relative position which mice provide.
	<li> touch screens can support multitouch whereas mice do
		<strong>not</strong> have a comparable capability.
	<li> None of the above
	</ol>
</li><br/>
<li> In order to support multitouch, touch screens should provide a continuous
	stream of position data 
	<ol class="answer_list">
	<li> in order to create the relative position data that it needs. 
	<li> to avoid the ghosting problem (i.e., the touch position is
		ambiguous).
	<li> otherwise data reported at discrete time increments will be
		understood as multiple separate touches (e.g., mouse clicks).
	<li> to prevent echoing, in which a single touch point may look like
		multiple touches.
	<li> None of the above
	</ol>
</li><br/>
<li> Text (or terminal) windows use
	<ol class="answer_list">
	<li> special character sequences to position the cursor and perform
		text insertion and deletion.
	<li> mixed sized text and different font styles to support document
		processing (e.g., Microsoft Word).
	<li> terminal capability (termcap) libraries to provide device
		independent support.
	<li> the raw scan codes from the keyboard, which is why they were
		commonly used on early computers.
	<li> None of the above
	</ol>
</li><br/>
<li> X11 is a windowing system
	<ol class="answer_list">
	<li> commonly used by Linux based systems.
	<li> allows programs to be run on one computer, with the display and
		interaction occurring on another computer.
	<li> uses a client-server model to separate the program's GUI operation
		from the rest of the program.
	<li> that is event driven. 
	<li> None of the above
	</ol>
</li><br/>
<li> Microsoft Windows and X11 differ in that
	<ol class="answer_list">
	<li> X11 is implemented as part of the OS kernel.
	<li> X11 user programs <strong>must</strong> explicitly coordinate the
		communication between the client and server components.
	<li> Microsoft Windows is portable and relatively easy to maintain.
	<li> Microsoft Windows combines the windowing and GUI elements together
		within the OS.
	<li> None of the above
	</ol>
</li><br/>
<li> Graphical User Interfaces (GUIs) are characterized by their use of
	<ol class="answer_list">
	<li> Windows
	<li> Icons
	<li> Menus
	<li> Pointing devices
	<li> None of the above
	</ol>
</li><br/>
<li> Unlike text windows, graphical user interfaces (GUIs)
	<ol class="answer_list">
	<li> are slower since they <strong>must</strong> use Programmed I/O.
	<li> require a graphics processing unit (GPU) be part of the hardware.
	<li> leverage a common graphical API (e.g., OpenGL) to make the
		software more portable.
	<li> <strong>must</strong> use the integerated graphics provided by
		the computer hardware (on the motherboard).
	<li> None of the above
	</ol>
</li><br/>

<li> Computer clocks and timers controlled by the OS are used to
	<ol class="answer_list">
	<li> support preemptive process/thread scheduling.
	<li> control the speed at which the CPU performs instructions.
	<li> time order independent (serializable) events.
	<li> prevent any simultaneous actions occurring within the computer.
	<li> None of the above
	</ol>
</li><br/>
<li> The computer clock hardware uses a crystal (tuned to a specific frequency) 
	to
	<ol class="answer_list">
	<li> cause a special register to count down to 0, which then
		generates an interrupt.
	<li> cause a special register to count the number of ticks since the
		epoch.
	<li> directly generate timing interrupts for the computer.
	<li> None of the above
	</ol>
</li><br/>
<li> Programmable clocks
	<ol class="answer_list">
	<li> can be used as a complete replacement for clock hardware.
	<li> are able to generate periodic clock interrupts.
	<li> read the special clock register value, and perform specific
		actions when particular values are reached.
	<li> alter the starting value of the special clock register to
		control the interval between clock generated interrupts.
	<li> None of the above
	</ol>
</li><br/>
<li> The calendar date and "wall" clock time are calculated
	<ol class="answer_list">
	<li> based on the number of clock ticks (usually in microseconds)
		since a specific starting date and time.
	<li> by keeping track of the years, days (0-365), hours (0-24),
		minutes (0-60), and seconds (0-60)
		that have elapsed based on regular clock interrupts. 
	<li> on a daily (24 hour clock) basis at midnight, with the time each
		day kept as a count of the microseconds since the last day.
	<li> by contacting an internet based time keeping service whenever
		the current date and time is needed.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are <strong>not</strong> a usual responsibility
	of a clock (device) driver?
	<ol class="answer_list">
	<li> preventing processes from running too long.
	<li> collecting profiling and statistics information on processes.
	<li> maintaining the time of day.
	<li> providing watchdog timers.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are functionality often supported by
	the clock (device) driver?
	<ol class="answer_list">
	<li> Polling of some input devices (e.g., mice, touch screens).
	<li> CPU accounting.
	<li> Software profiling.
	<li> Watchdog timers.
	<li> None of the above
	</ol>
</li><br/>
<li> To keep track of the time of day, the OS typically
	<ol class="answer_list">
	<li> keeps track of the year, the day within the year, and
		the number of milliseconds within the current day.
	<li> keeps track of the year and counts the number of microseconds
		 within the current year.
	<li> keeps track of the year and counts the number of clock ticks
		 within the current year.
	<li> counts the number of clock ticks since the epoch.
	<li> None of the above
	</ol>
</li><br/>
<li> Watchdog timers often use a direct procedure call rather than causing a
	signal because
	<ol class="answer_list">
	<li> they are just another type of clock, and usually call an alarm
		procedure that in turn generates the signal.
	<li> as a special type of alarm, they are only used within the same
		process.
	<li> for user processes, it reduces the lag between the timer firing
		and the associated work being performed.
	<li> it's faster and the call is for kernel processes so the watchdog
		doesn't need to do a context switch.
	<li> None of the above
	</ol>
</li><br/>
<li> Alarms are set using a system call and are usually implemented as a
	<ol class="answer_list">
	<li> sorted queue of times when an interrupt should be generated.
	<li> special register that holds the next alarm time. However, only
		one alarm can be set/active at a time.
	<li> separate process that the clock (device) driver signals on a
		periodic basis.
	<li> set of count down registers, with a separate register
		corresponding to each alarm.
	<li> None of the above
	</ol>
</li><br/>
<li> Alarms can be implemented using either absolute or relative times.
	<ol class="answer_list">
	<li> Absolute times are more accurate since using relative times allows
		small inaccuracies in alarm activations to grow over time.
	<li> Relative times are preferred since even the 64 bit registers of
		modern computers are <strong>not always</strong> large enough
		to hold the appropriate absolute time relative to the epoch.
	<li> Relative times provide greater precision and accuracy than
		absolute times.
	<li> The are no advantages of using either absolute or relative times
		over the other for implementing alarms.
	<li> None of the above
	</ol>
</li><br/>
<li> A simple but less accurate way to implement CPU accounting for processes
	is to have a single counter associated with each process in the
	proc_table, incrementing the counter for the currently running process
	whenever
	<ol class="answer_list">
	<li> an interrupt handler is started. The counter value divided by the
		sum of <strong>all</strong> such values, is the proportion of
		the CPU the process has used.
	<li> the process uses its full time quantum. Charging the process 1.5
		times the counter value.
	<li> the process becomes blocked. Charging the process 0.5 times the
		counter value.
	<li> a clock tick occurs.  Charging the currently running process for
		the full clock tick.
	<li> None of the above
	</ol>
</li><br/>
<li> If a timer with an additional, but different, frequency than the main
	system timer is needed, and accuracy to within 20 microseconds is
	sufficient, which of the following is an efficient solution?
	<ol class="answer_list">
	<li> Use an ALARM system call that resets every time it is triggered. 
	<li> Have a separate process poll the system clock, triggering an
		event when the desired (recurring) time interval is reached.
	<li> Use a "soft timer" based on the frequent running of the OS
		kernel to check for the desired time interval.
	<li> Adjust the starting value of the programmable clock to correspond
		to the alternate frequency.
	<li> None of the above
	</ol>
</li><br/>

<li> The tendency for two or more computer clocks in the same location to report
	different times after a long period is
	<ol class="answer_list">
	<li> the clock synchronization dilemma.
	<li> due primarily to the effects of general relativity.
	<li> a result of clock drift.
	<li> mostly caused by small variations in the frequency of AC power
		used.
	<li> None of the above
	</ol>
</li><br/>
<li> Computer based clocks are typically accurate to between
	<ol class="answer_list">
	<li> 1 - 10 ppm (about 0.5 - 5.25 minutes / year)
	<li> 10 ppb - 5 ppm (about 0.315 - 155 seconds / year)
	<li> 1 ppb - 2 ppm (about 0.0315 -  60 seconds / year)
	<li> 1 - 5 ppb (about 0.0315 - 0.1575 seconds / year)
	<li> None of the above
	</ol>
</li><br/>
<li> Due to General Relativity clocks will have different speeds based on differences
	in their their
	<ol class="answer_list">
	<li> velocity.
	<li> acceleration.
	<li> mass. 
	<li> gravitational field.
	<li> None of the above
	</ol>
</li><br/>
<li> Solving the clock synchronization problem (so the clocks read the exact
	same time) for computers in different locations is
	<ol class="answer_list">
	<li> <strong>not</strong> possible.
	<li> simply a matter of having more accurate clocks.
	<li> possible by using a single shared clock.
	<li> doable by using multiple highly accurate clocks
		(e.g., GPS satellites) with computers periodically
		averaging the set of times they get.
	<li> None of the above
	</ol>
</li><br/>
<li> Given two events that occurred on different computer systems, it is
	<ol class="answer_list">
	<li> <strong>always</strong> possible to determine which event
		occurred before the other.
	<li> possible to determine which event occurred before the other,
		but only if the computer systems have recently (e.g., within
		the past minute) synchronized their clocks.
	<li> sometimes possible, but only when there is another event on a third
		computer system to which each of these events can be compared.
	<li> <strong>never</strong> possible to determine which event occurred
		before the other.
	<li> None of the above
	</ol>
</li><br/>
<li> All events occurring on different computer systems, which regularly
	exchanged messages, can
	<ol class="answer_list">
	<li> <strong>always</strong> be fully ordered.
	<li> <strong>always</strong> be partially ordered, and sometimes fully
		ordered (but only if no more than 5 events occur on a system
		between the exchange of messages).
	<li> <strong>always</strong> be partially ordered, but
		<strong>never</strong> fully ordered.
	<li> <strong>never</strong> be ordered.
	<li> None of the above
	</ol>
</li><br/>
<li> A polytree can be used to represent events occurring on different communicating
	computer systems, where
	<ol class="answer_list">
	<li> nodes correspond to events.
	<li> nodes correspond to computer systems.
	<li> directed edges correspond to messages (pointing from the sender to
		the receiver).
	<li> undirected edges correspond to the network connections between the
		different computer systems.
	<li> None of the above
	</ol>
</li><br/>
<li> Lamport timestamps
	<ol class="answer_list">
	<li> enable the physical clocks of different computers to be
		synchronized sufficiently well so that the physical clock
		times can be used to fully order <strong>all</strong> events. 
	<li> provide a logical clock, which yields a time that can be used just
		like time from a physical clock, but that also enables all
		events to be fully ordered.
	<li> provide a logical clock, which yields a time that can be used to
		fully order <strong>all</strong> events, but which has no real
		correspondence to any of the physical clocks.
	<li> provide a logical clock, which yields a time that can be used to
		partially order events, but which has no real correspondence
		to any of the physical clocks.
	<li> None of the above
	</ol>
</li><br/>
<li> The algorithm for Lamport timestamps requires that each computer
	<ol class="answer_list">
	<li> maintain a clock-like counter which is incremented every time the
		computer's clock increments.
	<li> maintain a clock-like counter which is incremented before each
		event.
	<li> send its clock-like counter as part of every message sent to
		another computer.
	<li> periodically ask other computers for their clock-like counter
		values, setting its value to the lower of the value received
		and its current value.
	<li> None of the above
	</ol>
</li><br/>
<li> Lamport timestamps establishes a "happened-before" relationship on events,
	such that
	<ol class="answer_list">
	<li> if "a" happened-before "b", then the count value associated with
		event "a" is less than the count value associated
		with event "b".
	<li> if "a" happened-before "b", then the count value associated with
		event "a" is less than or equal to the count value associated
		with event "b".
	<li> if the count value associated with event "a" is less
		than the count value associated with event "b", then "a"
		happened-before "b".
	<li> if the count value associated with event "a" is less than or
		equal to the count value associated with event "b", then "a"
		happened-before "b".
	<li> None of the above
	</ol>
</li><br/>
<li> The vector clock algorithm is similar to the algorithnm for Lamport
	timestamps except that
	<ol class="answer_list">
	<li> each process (or computer) keeps a list of logical clocks
		(counters) corresponding to each process (computer),
		<strong>not</strong> just one clock for itself.
	<li> messages do <strong>not</strong> include any logical clock
		(counter) values when sent.
	<li> <strong>all</strong> logical clock (counter) values in a process'
		(computer's) list of counter values are increased to the
		maximum logical clock value in a received message.
	<li> <strong>all</strong> logical clock (counter) values in a process'
		(computer's) list of counter values are increased by one
		when a message is received.
	<li> None of the above
	</ol>
</li><br/>
<li> The vector clock algorithm establishes a relationship on events, such that
	<ol class="answer_list">
	<li> if "a" happened-before "b", then [HTML]<strong>all</strong>[/HTML]
		of the count values in the vector for event "a" are less than
		or equal to the corresponding count values in the vector
		associated with event "b".
	<li> if "a" happened-before "b", then most (but not necessarily all)
		of the count values in the vector for event "a" are less than
		the corresponding count values in the vector associated with
		event "b".
	<li> if [HTML]<strong>all</strong>[/HTML] of the count values in the
		vector associated with event "a" are less than or equal to the
		corresponding count values in the vector associated with event
		"b", then "a" happened-before "b".
	<li> if some of the count values in the vector associated with event
		"a" are less (and some are greater) than the corresponding
		count values in the vector associated with event "b", then
		"a" and "b" are concurrent.
	<li> None of the above
	</ol>
</li><br/>
<li> The vector clock algorithm, when compared to Lamport timestamps
	<ol class="answer_list">
	<li> provides exactly the same "happened-before" relationship.
	<li> provides a more powerful "happened-before" relationship that
		works in both directions (i.e., it is an "if and only if"
		relationship).
	<li> provides an additional "concurrent" relationship for when some of
		the corresponding clock vector entries for events "a" and "b"
		are less and some are greater than one another.
	<li> provides a complete ordering on all events.
	<li> None of the above
	</ol>
</li><br/>

<li> While there are multiple date formats commonly used throughout the world,
	<ol class="answer_list">
	<li> no country uses more than one date format.
	<li> there is no ambiguity between the different formats used within
		any single country.
	<li> there is no ambiguity between any of the formats used throughout
		the world.
	<li> the year is <strong>always</strong> the last part of date.
	<li> None of the above
	</ol>
</li><br/>
<li> The format(s) commonly used for indicating the time of day
	<ol class="answer_list">
	<li> <strong>all</strong> unambiguously indicate the time of day,
		so there is no confusion within the same format or between
		different formats.
	<li> are ambiguous in some cases, where one written time could be
		interpreted multiple ways (even within the same format).
	<li> can be confused with one another such that a time written in
		one format could be interpreted as a different part of the
		day in another format.
	<li> None of the above
	</ol>
</li><br/>
<li> The international standard (ISO 8601) for indicating the date (and time)
	<ol class="answer_list">
	<li> is based on the Gregorian calendar.
	<li> gives the most significant part of the date (and time) first
		(reading left to right).
	<li> gives the least significant part of the date (and time) first
		(reading left to right).
	<li> uses zero padding for everything except the year.
	<li> None of the above
	</ol>
</li><br/>
<li> While the international standard (ISO 8601) for indicating the date
	(and time) does <strong>not</strong> require their use
	<ol class="answer_list">
	<li> the three letter month abbreviation is recommended both for
		readability and to reduce possible confusion with other formats.
	<li> zero padding of numbers (e.g., months, days, hours, minutes) is
		recommended for consistency of date and time lengths.
	<li> "BCE" and "CE" can be used to clarify the era for the year.
	<li> hyphens (-) and colons (:) are recommended for both readability and
		to reduce possible confusion with other formats.
	<li> None of the above
	</ol>
</li><br/>
<li> Drawback(s) of the Gregorian calendar include:
	<ol class="answer_list">
	<li> dates between 1582 and about 1755 can be unrealiable.
	<li> many people do <strong>not</strong> know the leap year rules
		(e.g., why 2000 was a leap year but 2100 will not be).
	<li> much of the world still does <strong>not</strong> use it for civil,
		official, or administrative purposes.
	<li> it is only used in predominantly christian countries.
	<li> None of the above
	</ol>
</li><br/>
<li> Julian dates are used by astronomers because
	<ol class="answer_list">
	<li> the day starts at noon rather than at midnight.
	<li> the leap year rules are simpler (1 extra day every 7 years)
		than in the Gregorian calendar.
	<li> observations by early astronomers were done using this calendar,
		thus they didn't change when the Gregorian calendar was
		introduced.
	<li> simple subtraction indicates the time difference between two
		"dates".
	<li> None of the above
	</ol>
</li><br/>
<li> The epoch (first day) for Julian dates was
	<ol class="answer_list">
	<li> 1 Jan 4713 BCE
	<li> 25 Dec 1 CE
	<li> 1 Jan 1970 CE
	<li> 1 Jan 1980 CE
	<li> None of the above
	</ol>
</li><br/>

<li> In the context of a computer system, the following are considered
	resources:
	<ol class="answer_list">
	<li> I/O devices
	<li> CPU
	<li> Memory
	<li> Software
	<li> None of the above
	</ol>
</li><br/>
<li> A preemptable resource is one that when temporarily taken away from a
	process
	<ol class="answer_list">
	<li> will <strong>not</strong> cause a problem for the preempted
		process.
	<li> may sometimes cause a problem for the preempted process,
		including possible process failure.
	<li> <strong>always</strong> results in failure of the preempted
		process.
	<li> None of the above
	</ol>
</li><br/>
<li> A non-preemptable resource is one that when taken away (even if only
	temporarily) from a process
	<ol class="answer_list">
	<li> will <strong>not</strong> cause a problem for the preempted
		process.
	<li> may sometimes cause a problem for the preempted process,
		including possible process failure.
	<li> <strong>always</strong> results in failure of the preempted
		process.
	<li> None of the above
	</ol>
</li><br/>
<li> The typical interaction pattern between a process and a resource is
	<ol class="answer_list">
	<li> detected, requested, used, released.
	<li> requested, used, released.
	<li> requested, granted, used, released.
	<li> granted, used, released.
	<li> None of the above
	</ol>
</li><br/>
<li> Software (e.g., blocks of code) can be viewed as a non-premeptable resource
	<ol class="answer_list">
	<li> because they in turn use resources (e.g., CPU, memory).
	<li> when mutex semaphores are used to controlled access.
	<li> since it can access the system bus.
	<li> if it is part of a user process that the OS schedules to run
		in the CPU.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following conditions <strong>must</strong> hold in order for
	deadlock to exist?
	<ol class="answer_list">
	<li> Only one instance of each type of resource exists.
	<li> Mutually exclusive use of resources.
	<li> Resources are controlled and allocated only by the OS.
	<li> Processes can hold resources while requesting additional resources.
	<li> Process scheduling <strong>must</strong> be non-preemptive.
	<li> Granted resources cannot be preempted.
	<li> All resources within the system have been allocated.
	<li> Circular wait condition.
	<li> All processes within the system are in the blocked state.
	<li> None of the above
	</ol>
</li><br/>
<li> A set of processes is deadlocked when
	<ol class="answer_list">
	<li> <strong>all</strong> of the processes in the set are in the
		blocked state.
	<li> every resource in the system has been granted to a process in
		the set.
	<li> each process in the set is waiting for an event that only another
		process in the set can cause.
	<li> no process in the set has been granted a preemptable resource. 
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following is <strong>not</strong> a strategy for dealing
	with deadlocks?
	<ol class="answer_list">
	<li> Prevention
	<li> Dynamic avoidance
	<li> Detection and recovery
	<li> Ignore the problem
	<li> None of the above
	</ol>
</li><br/>
<li> Deadlock modeling represents resources (squares) and processes (circles)
	as a graph with
	<ol class="answer_list">
	<li> arrows pointing from a process to a resource represent an
		(ungranted) resource request.
	<li> arrows pointing from a resource to a process represent a
		granted resource.
	<li> arrows pointing in both directions between a process and a
		resource represent a granted dedicated non-preemptable
		resource.
	<li> undirected lines (no arrows) between a process and a resource
		represent a granted preemptable resource.
	<li> None of the above
	</ol>
</li><br/>
<li> In a deadlock model graph, a deadlock exists when
	<ol class="answer_list">
	<li> at least one process has more than two (2) arrows pointing to it.
	<li> at least one resource has more than two (2) arrows pointing to it.
	<li> there is a directed cycle in the graph.
	<li> the graph forms a tree.
	<li> None of the above
	</ol>
</li><br/>
<li> The following resource graph indicates that:<br/>
	<img src="/eckart/classes/cpsc3125/questions/ResourceGraph_1.png" width="406" height="384" alt="Resource Graph" />
	<ol class="answer_list">
	<li> No deadlock exists.
	<li> No deadlock exists, but there is a livelock on "T".
	<li> A deadlock exists involving the processes and resources
		denoted by: B, T, C, S.
	<li> A deadlock exists involving the processes and resources
		denoted by: D, R, B, T.
	<li> None of the above
	</ol>
</li><br/>
<li> The following resource graph indicates that:<br/>
	<img src="/eckart/classes/cpsc3125/questions/ResourceGraph_2.png" width="383" height="365" alt="Resource Graph" />
	<ol class="answer_list">
	<li> No deadlock exists.
	<li> No deadlock exists, but there is a livelock on "T".
	<li> A deadlock exists involving the processes and resources
		denoted by: A, T, D, U.
	<li> A deadlock exists involving the processes and resources
		denoted by: A, R, B, S, C, T.
	<li> None of the above
	</ol>
</li><br/>

<li> Which strategy for dealing with deadlock is used by most systems (e.g.,
	Linux, Mac OS X, Windows)?
	<ol class="answer_list">
	<li> Prevention
	<li> Dynamic avoidance
	<li> Detection and recovery
	<li> Ignore the problem
	<li> None of the above
	</ol>
</li><br/>
<li> Determining whether or not a deadlock <em>actually</em> exists in the
	system requires
	<ol class="answer_list">
	<li> building the deadlock model graph and checking for cycles.
	<li> checking whether or not <strong>all</strong> processes are in
		the blocked state.
	<li> periodically checking how long blocked processes have been blocked.
	<li> periodically checking whether there are any processes in the ready
		state.
	<li> None of the above
	</ol>
</li><br/>
<li> Deadlock detection is
	<ol class="answer_list">
	<li> fast and easy to run, so it should be done every time a resource is
		allocated.
	<li> fast and easy to run, so it should be done every time a new process
		is created.
	<li> rather slow and costly to run, so it should be run only when a
		process has been blocked for a long time (assuming there's no
		urgent need to detect a possible deadlock).
	<li> rather slow and costly to run, so it should be run only when
		there is no user process in the ready state. That is, it
		should be run as the idle process.
	<li> None of the above
	</ol>
</li><br/>
<li> If a deadlock has been detected, recovery can be accomplished by
	<ol class="answer_list">
	<li> waiting until a process in the deadlock releases
		<strong>all</strong> its resources.
	<li> rolling back a process in the deadlock to a checkpoint before it
		requested a resource participating in the deadlock.
	<li> terminating a process in the deadlock (thus releasing
		<strong>all</strong> of its granted resources).
	<li> change <strong>all</strong> of the processes in the deadlock
		to the ready state.
	<li> None of the above
	</ol>
</li><br/>
<li> When recovering from a deadlock by terminating a process that was
	participating in a deadlock
	<ol class="answer_list">
	<li> give preference to processes with the least amount of
		accumulated CPU time is often <strong>best</strong>.
	<li> change <strong>all</strong> remaining blocked processes to the
		ready state after terminating the offending process.
	<li> recheck to determine if any additional deadlocks still exist.
	<li> do <strong>not</strong> allow any other processes in the deadlock
		to acquire the resources released by the terminating process.
	<li> None of the above
	</ol>
</li><br/>

<li> Dynamic deadlock avoidance assumes that
	<ol class="answer_list">
	<li> it is possible to preempt an otherwise non-preemptable resource
		if deadlock would otherwise occur.
	<li> the resource needs of a process can be changed by the OS.
	<li> processes can be terminated if their resource request would 
		cause a deadlock.
	<li> there exists a resource allocation that would allow
		<strong>all</strong> current processes to complete.
	<li> None of the above
	</ol>
</li><br/>
<li> An <em>UNsafe state</em> with respect to dynamic avoidance of deadlock is
	one in which
	<ol class="answer_list">
	<li> there exists one or more resource allocation scenarios that
		allow some (but not all) processes to complete.
	<li> there exists at least one resource allocation scenario that
		would prevent <strong>all</strong> processes from completing.
	<li> no resource allocation scenario guarantees <strong>all</strong>
		processes will complete.
	<li> None of the above
	</ol>
</li><br/>
<li> A <em>safe state</em> with respect to dynamic avoidance of deadlock is
	one in which
	<ol class="answer_list">
	<li> <strong>all</strong> resource allocation scenarios allow
		<strong>all</strong> processes to complete.
	<li> there exists one or more resource allocation scenarios that
		allow some (but not all) processes to complete.
	<li> there exists at least one resource allocation scenario that
		would allow <strong>all</strong> processes to complete.
	<li> None of the above
	</ol>
</li><br/>
<li> If a set of processes and resources is in an <em>UNsafe state</em> with
	respect to deadlock, then deadlock
	<ol class="answer_list">
	<li> is guaranteed to occur eventually.
	<li> will occur if <strong>all</strong> processes use their maximum
		required resources.
	<li> may still be avoided if some processes use less than their
		maximum required resources.
	<li> can <strong>always</strong> be avoided by withholding additional
		resources from one or more processes.
	<li> None of the above
	</ol>
</li><br/>
<li> The Banker's algorithm for dynamic deadlock avoidance requires that
	<ol class="answer_list">
	<li> there <strong>always</strong> be sufficient
		resources available to meet <strong>all</strong> processes'
		maximum requests simultaneously.
	<li> there <strong>always</strong> be sufficient
		resources available to meet at least one process' maximum
		request.
	<li> the minimum resource needs of <strong>all</strong>
		processes be known beforehand.
	<li> the maximum resource needs of <strong>all</strong>
		processes be known beforehand.
	<li> None of the above
	</ol>
</li><br/>
<li> The Banker's algorithm for dynamic deadlock avoidance is most applicable
	to batch processing because
	<ol class="answer_list">
	<li> preemptive scheduling is <strong>not</strong> generally used.
	<li> virtual memory is <strong>never</strong> used.
	<li> the running time for each process is known from previous
		executions.
	<li> the processes and their maximum resource needs are typically
		known beforehand.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to the Banker's algorithm, assuming the bank started with
	100 units of resource, what is true about the system given the
	following situation?
	<blockquote>
	<table style="text-align: center">
	<tr><th></th><th colspan="2">Allocation</th></tr>
	<tr><th>Process</th><th>Maximum<br/>Possible</th><th>Current</th></tr>
	<tr><td>A</td><td>10</td><td>5</td></tr>
	<tr><td>B</td><td>20</td><td>10</td></tr>
	<tr><td>C</td><td>30</td><td>15</td></tr>
	<tr><td>D</td><td>40</td><td>20</td></tr>
	</table>
	</blockquote>
	<ol class="answer_list">
	<li> The system cannot become deadlocked.
	<li> The system is in a safe state.
	<li> The system is in an UNsafe state.
	<li> The system is deadlocked if <strong>all</strong>
		processes need even one additional resource.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to the Banker's algorithm, assuming the bank started with
	60 units of resource, what is true about the system given the
	following situation?
	<blockquote>
	<table style="text-align: center">
	<tr><th></th><th colspan="2">Allocation</th></tr>
	<tr><th>Process</th><th>Maximum<br/>Possible</th><th>Current</th></tr>
	<tr><td>A</td><td>10</td><td>5</td></tr>
	<tr><td>B</td><td>20</td><td>10</td></tr>
	<tr><td>C</td><td>30</td><td>15</td></tr>
	<tr><td>D</td><td>40</td><td>20</td></tr>
	</table>
	</blockquote>
	<ol class="answer_list">
	<li> The system cannot become deadlocked.
	<li> The system is in a safe state.
	<li> The system is in an UNsafe state.
	<li> The system is deadlocked if <strong>all</strong>
		processes need even one additional resource.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to the Banker's algorithm, assuming the bank started with
	50 units of resource, what is true about the system given the
	following situation?
	<blockquote>
	<table style="text-align: center">
	<tr><th></th><th colspan="2">Allocation</th></tr>
	<tr><th>Process</th><th>Maximum<br/>Possible</th><th>Current</th></tr>
	<tr><td>A</td><td>10</td><td>5</td></tr>
	<tr><td>B</td><td>20</td><td>10</td></tr>
	<tr><td>C</td><td>30</td><td>15</td></tr>
	<tr><td>D</td><td>40</td><td>20</td></tr>
	</table>
	</blockquote>
	<ol class="answer_list">
	<li> The system cannot become deadlocked.
	<li> The system is in a safe state.
	<li> The system is in an UNsafe state.
	<li> The system is deadlocked if <strong>all</strong>
		processes need even one additional resource.
	<li> None of the above
	</ol>
</li><br/>

<li> Which of the following prevents deadlock by negating the exclusive use
	of resources?
	<ol class="answer_list">
	<li> The use of two-phase locking.
	<li> Use spooling and a spool daemon, with the spool daemon using only
		a single resource.
	<li> Allow a process to hold only one resource at a time.
	<li> Requiring that new resource requests by a process occur in
		increasing resource priority order.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following prevents deadlock by negating the holding of
	resource while making additional requests?
	<ol class="answer_list">
	<li> Requiring that new resource requests by a process occur in
		increasing resource priority order.
	<li> Allow a process to hold only one resource at a time.
	<li> Use spooling and a spool daemon, with the spool daemon using only
		a single resource.
	<li> The use of two-phase locking.
	<li> None of the above
	</ol>
</li><br/>
<li> Preventing deadlock by negating the non-preemptability of resources
	works for resources
	<ol class="answer_list">
	<li> that can be spooled, thus ensuring that the resource
		<strong>never</strong> needs to be preempted.
	<li> which are only assigned using two-phase locking.
	<li> like the CPU, but <strong>not</strong> for <strong>all</strong>
		types of resources.
	<li> assigned in strictly decreasing order resource priority order.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following prevents deadlock by negating the circular
	wait condition?
	<ol class="answer_list">
	<li> Use spooling and a spool daemon, with the spool daemon using only
		a single resource.
	<li> Allow a process to hold only one resource at a time.
	<li> Requiring that new resource requests by a process occur in
		increasing resource priority order.
	<li> The use of two-phase locking.
	<li> None of the above
	</ol>
</li><br/>

<li> Starvation occurs when a process is <strong>not</strong> deadlocked,
	<ol class="answer_list">
	<li> but is consistently unable to obtain a needed resource, often
		because the resource keeps being assigned to other processes.
	<li> and is assigned the needed resource, but the resource is
		continually preempted.
	<li> but continually acquires and returns the same resource over and
		over.
	<li> but waits for a signal from another process which
		<strong>never</strong> comes.
	<li> None of the above
	</ol>
</li><br/>
<li> Livelock occurs when a set of two or more processes
	<ol class="answer_list">
	<li> experience a combination of both deadlock and starvation.
	<li> are unable to get <strong>all</strong> their needed resources,
		and continually give back those resources that were granted
		and retry getting <strong>all</strong> of them
		<strong>without</strong> success.
	<li> are waiting for signals from each other before continuing
		their remaining computations.
	<li> is only missing one of the 4 conditions necessary for deadlock.
	<li> None of the above
	</ol>
</li><br/>
<li> A communication deadlock can occur when
	<ol class="answer_list">
	<li> messages are lost in transit.
	<li> a process is starved for a communication channel. 
	<li> <strong>all</strong> the processes that are trying to
		communicate are in livelock.
	<li> two-phase locking is used to allocate communicate channels.
	<li> None of the above
	</ol>
</li><br/>
<li> Communication deadlocks can often (though <strong>not always</strong>)
	be avoid by using
	<ol class="answer_list">
	<li> multiple communication channels.
	<li> a single message packet that is passed between the processes.
	<li> two-phase locking.
	<li> message acknowledgements in combination with timeouts (when
		acknowledgements are <strong>not</strong> promptly received).
	<li> None of the above
	</ol>
</li><br/>
<li> Two-phase locking is characterized by
	<ol class="answer_list">
	<li> assigning resources priorities and requiring processes to request
		resources in increasing priority order.
	<li> requiring that <strong>all</strong> resources be preemptable.
	<li> repeatedly trying to get <strong>all</strong> needed resources,
		returning those granted if some requests went unsatisfied,
		until <strong>all</strong> the resources are finally acquired.
	<li> having processes make two requests (in quick succession)
		to acquire a resource.
	<li> None of the above
	</ol>
</li><br/>

<li> The OS mechanisms used to provide security are called
	<ol class="answer_list">
	<li> threats.
	<li> shields.
	<li> security perimeter.
	<li> protection mechanisms.
	<li> None of the above
	</ol>
</li><br/>
<li> Any set of actions taken to gain unauthorized access to a system is
	called a (an)
	<ol class="answer_list">
	<li> vulnerability.
	<li> exploit.
	<li> 0-day attack.
	<li> script.
	<li> None of the above
	</ol>
</li><br/>
<li> Someone who enjoys the creativity and challenge of solving problems is
	called a
	<ol class="answer_list">
	<li> maker.
	<li> hacker.
	<li> cracker.
	<li> white hat.
	<li> None of the above
	</ol>
</li><br/>
<li> Someone who attempts to gain unauthorized access to a system is called a
	<ol class="answer_list">
	<li> black hat.
	<li> cracker.
	<li> script kiddie.
	<li> hacker.
	<li> None of the above
	</ol>
</li><br/>
<li> A software bug that can be used to subvert the security of a system is
	called a
	<ol class="answer_list">
	<li> security hole.
	<li> vulnerability.
	<li> exploit.
	<li> threat.
	<li> None of the above
	</ol>
</li><br/>
<li> The difference(s) between active and passive intruders are that
	<ol class="answer_list">
	<li> passive intruders use an existing users credentials for access
		while active intruders use vulnerabilities to break in.
	<li> passive intruders rely on social engineering whereas active
		intruders use technical exploits.
	<li> active intruders use acquired data for personal gain while
		passive intruders use the data to expose the illegal
		activities of others.
	<li> active intruders write/change data whereas passive intruders
		only read data.
	<li> None of the above
	</ol>
</li><br/>
<li> A passive intruder <strong>must</strong> have
	<ol class="answer_list">
	<li> the credentials of an authorized user to access data.
	<li> electronic access to the computer system.
	<li> physical access to the computer system.
	<li> an exploit for a known vulnerability.
	<li> None of the above
	</ol>
</li><br/>
<li> An active intruder <strong>must</strong> have
	<ol class="answer_list">
	<li> the credentials of an authorized user to access data.
	<li> electronic access to the computer system.
	<li> physical access to the computer system.
	<li> an exploit for a known vulnerability.
	<li> None of the above
	</ol>
</li><br/>
<li> Determining who can see what data (e.g., privacy) is known as information
	<ol class="answer_list">
	<li> availability.
	<li> accountability.
	<li> confidentiality.
	<li> integrity.
	<li> None of the above
	</ol>
</li><br/>
<li> Preventing the change or removal of data by unauthorized people is
	information
	<ol class="answer_list">
	<li> availability.
	<li> accountability.
	<li> confidentiality.
	<li> integrity.
	<li> None of the above
	</ol>
</li><br/>
<li> Ensuring that unauthorized people are <strong>not</strong> able to make
	a system unusable or reduce its performance is called information
	<ol class="answer_list">
	<li> availability.
	<li> accountability.
	<li> confidentiality.
	<li> integrity.
	<li> None of the above
	</ol>
</li><br/>
<li> The loss of data availability requires
	<ol class="answer_list">
	<li> the loss of data accountability.
	<li> the loss of data integrity.
	<li> a loss of data confidentiality.
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of attack would be the hardest to detect and defend against?
	<ol class="answer_list">
	<li> A passive attack by an outsider.
	<li> A passive attack by an insider.
	<li> An active attack by an outsider.
	<li> An active attack by an insider.
	<li> None of the above
	</ol>
</li><br/>
<li> What term is used to describe unskilled persons that use software
	developed by others to gain unauthorized access to computer systems
	and data?
	<ol class="answer_list">
	<li> Script-kiddie
	<li> Black Hat
	<li> Cracker
	<li> Hacker
	<li> None of the above
	</ol>
</li><br/>
<li> A group of networked and compromised computers that are used to conduct
	illegal activities on a massive scale is called
	<ol class="answer_list">
	<li> cyberwarfare.
	<li> a botnet.
	<li> port scanning.
	<li> a script-kiddie.
	<li> None of the above
	</ol>
</li><br/>
<li> Port scanning is a common method used to
	<ol class="answer_list">
	<li> discover computer systems and their potential vulnerabilities.
	<li> form a group of networked computers into a botnet.
	<li> exploit the known vulnerabilities of a system.
	<li> conduct a passive insider attack on a system.
	<li> None of the above
	</ol>
</li><br/>
<li> A computer system that meets a formally stated set of security requirements
	is called a
	<ol class="answer_list">
	<li> secure system.
	<li> trusted computer base.
	<li> trusted system.
	<li> validated system.
	<li> None of the above
	</ol>
</li><br/>
<li> The set of hardware and software that provides the basis for a system
	that meets a formally stated set of security requirements is called a
	<ol class="answer_list">
	<li> secure system.
	<li> trusted computer base.
	<li> trusted system.
	<li> validated system.
	<li> None of the above
	</ol>
</li><br/>
<li> A trusted computing base (TCB) is comprised of
	<ol class="answer_list">
	<li> most (but not necessarily all) of the computer hardware.
	<li> <strong>all</strong> the hardware and software of a computer
		system.
	<li> the human processes and procedures used to operate the computer
		system.
	<li> the core part of the OS (e.g., microkernel).
	<li> None of the above
	</ol>
</li><br/>

<li> A domain is a set of object-right pairs, in which the
	<ol class="answer_list">
	<li> object represents a resource (e.g., file, cpu, disk, software).
	<li> object represents users and groups of users.
	<li> right represents the permission to perform a specific operation.
	<li> right represents one of ADD, DELETE, MODIFY.
	<li> None of the above
	</ol>
</li><br/>
<li> When users (and processes) only have access to the resources (and
	operations) necessary to complete a task, this is known as the
	<ol class="answer_list">
	<li> lowest access protocol.
	<li> least common denominator.
	<li> principle of necessary privilege.
	<li> principle of least authority.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to file objects in a POSIX system, the rights are the
	<ol class="answer_list">
	<li> add, remove, modify operations allowed for the file owner.
	<li> add, remove, modify operations allowed for the file owner
		and everyone else.
	<li> read, write, and execute operations allowed for the file owner.
	<li> read, write, and execute operations allowed for the file owner,
		the file's group, and everyone else.
	<li> None of the above
	</ol>
</li><br/>
<li> The SETUID bit associated with files on a POSIX system are used to
	<ol class="answer_list">
	<li> execute the program file with the identity of the file's owner,
		regardless of who executes the program file.
	<li> ensure that the file is owned by the file's creator.
	<li> enable the owner of a file to execute the program it holds.
	<li> enable anyone to execute the program file.
	<li> None of the above
	</ol>
</li><br/>
<li> The SETUID bit associated with files on a POSIX system can create a
	secruity risk
	<ol class="answer_list">
	<li> because it enables someone other than the owner of a file to
		delete or change the file.
	<li> if the file owner has the same privileges as the superuser
		(e.g., root or administrator accounts).
	<li> since it allows users to change their identity whenever they
		wish.
	<li> when the file contains non-executable, but sensitive data.
	<li> None of the above
	</ol>
</li><br/>
<li> If the protection matrix is drawn like the below, what information is
	stored within the matrix locations? 
<table border="1">
<tr>
	<th colspan="2" rowspan="2"></th>
	<th colspan="8">Objects</th>
</tr>
<tr>
	<th>File 1</th>
	<th>File 2</th>
	<th>...</th>
	<th>File N</th>
	<th>Domain 1</th>
	<th>Domain 2</th>
	<th>...</th>
	<th>Domain D</th>
</tr>
<tr>
	<th rowspan="4" style="vertical-align: middle">Subjects</th>
	<th>Domain 1</th>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
</tr>
<tr>
	<th>Domain 2</th>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
</tr>
<tr>
	<th>...</th>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
</tr>
<tr>
	<th>Domain D</th>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
	<td></td>
</tr>
</table>
	<ol class="answer_list">
	<li> Usernames that are the owners of the object within the subject
		domain.
	<li> 1 if the object is owned by the subject, and 0 otherwise.
	<li> Operations the subject is allowed to perform on the object.
	<li> Group names that contain both the (user) subject and which are
		group owners of the object.
	<li> None of the above
	</ol>
</li><br/>
<li> The objects within the protection matrix are most often associated with
	<ol class="answer_list">
	<li> users.
	<li> groups of users.
	<li> processes.
	<li> files.
	<li> None of the above
	</ol>
</li><br/>
<li> The subjects within the protection matrix are most often associated with
	<ol class="answer_list">
	<li> users.
	<li> groups of users.
	<li> processes.
	<li> files.
	<li> None of the above
	</ol>
</li><br/>
<li> Domains can appear both as objects and subjects within the protection
	matrix in order to
	<ol class="answer_list">
	<li> allow domains to add, remove, or modify themselves.
	<li> allow domains to add, remove, or modify other domains.
	<li> support switching from one domain to another domain.
	<li> enable domains to create new domains. 
	<li> None of the above
	</ol>
</li><br/>
<li> Because the protection matrix can be quite large, most systems don't
	store it as a full matrix. When the matrix is stored as sparse
	rows, it is called
	<ol class="answer_list">
	<li> an Object Permissions List.
	<li> an Access Control List.
	<li> a Capability List.
	<li> a Subject Permissions List.
	<li> None of the above
	</ol>
</li><br/>
<li> Because the protection matrix can be quite large, most systems don't
	store it as a full matrix. When the matrix is stored as sparse
	columns, it is called
	<ol class="answer_list">
	<li> an Object Permissions List.
	<li> an Access Control List.
	<li> a Capability List.
	<li> a Subject Permissions List.
	<li> None of the above
	</ol>
</li><br/>
<li> POSIX systems typically store the protection matrix (using 9 bits to
	store the permissions for 3 domain categories) as a version of
	<ol class="answer_list">
	<li> an Object Permissions List.
	<li> an Access Control List.
	<li> a Capability List.
	<li> a Subject Permissions List.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following corresponds most closely to the storage of a
	protection matrix using a Capability List?
	<ol class="answer_list">
	<li>
<table border="1">
<tr>
<th>Write</th>
<td>File 2: Domain 3, Domain 4</td>
<td>File 5: Domain 7</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>File 2</th>
<td>Domain 2: Write</td>
<td>Domain D: Read/Write</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>Domain 2</th>
<td>File 2: Write</td>
<td>File N: Execute</td>
<td>Domain D: Enter</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>File 3</th>
<td>Read: Domain 4, Domain 7</td>
<td>Write: Domain 5</td>
</tr>
</table>
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following corresponds most closely to the storage of a
	protection matrix using an Access Control List?
	<ol class="answer_list">
	<li>
<table border="1">
<tr>
<th>Write</th>
<td>File 2: Domain 3, Domain 4</td>
<td>File 5: Domain 7</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>File 2</th>
<td>Domain 2: Write</td>
<td>Domain D: Read/Write</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>Domain 2</th>
<td>File 2: Write</td>
<td>File N: Execute</td>
<td>Domain D: Enter</td>
</tr>
</table>
	<li>
<table border="1">
<tr>
<th>File 3</th>
<td>Read: Domain 4, Domain 7</td>
<td>Write: Domain 5</td>
</tr>
</table>
	<li> None of the above
	</ol>
</li><br/>
<li> Additional advantage(s) that Capability Lists have over Access Control
	Lists is that they are
	<ol class="answer_list">
	<li> themselves objects and can thus be referenced by other
		Capability Lists.
	<li> able to more easily add, delete, or change the rights to an
		object by a specific subject.
	<li> more efficient in allowing a process to exercise a specific right.
	<li> able to revoke <strong>all</strong> rights to an object (by
		<strong>all</strong> subjects) more quickly and easily.
	<li> None of the above
	</ol>
</li><br/>
<li> Since Capability Lists are associated with (and "owned" by) subjects
	(i.e., users), unlike Access Control Lists, they <strong>must</strong>
	be protected from tampering otherwise
	<ol class="answer_list">
	<li> the subject of that Capability List could grant themselves
		additional capabilities.
	<li> anyone on the system could remove capabilities from other users.
	<li> anyone on the system could remove subjects, even those they
		didn't own.
	<li> Capability Lists wouldn't be able to reference other Capability
		Lists.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following ways in which Capability Lists are protected from
	tampering?
	<ol class="answer_list">
	<li> Each user's login shell prevents that user from accessing their
		own Capability List, even though they own it.
	<li> Special hardware tag bits in memory to indicate which data are
		part of a capability list.
	<li> The Capability Lists are kept in the OS with no direct access by
		subjects.
	<li> A one-way hash function is used to prevent alteration, enabling
		the Capability lists to be stored in user space.
	<li> None of the above
	</ol>
</li><br/>
<li> If groups of subjects/users are <strong>not</strong> supported,
	then Access Control Lists
	<ol class="answer_list">
	<li> can become very large if rights are granted to every user.
	<li> <strong>must</strong> collect objects together into groups instead.
	<li> are associated with each subject (to make access faster) rather
		than with the corresponding object. 
	<li> become extremely slow to use, so Capability Lists should be used
		instead.
	<li> None of the above
	</ol>
</li><br/>
<li> Access Control Lists enable rights to an object by a specific subject to
	be easily
	<ol class="answer_list">
	<li> added.
	<li> modified.
	<li> deleted.
	<li> None of the above
	</ol>
</li><br/>

<li> The protection matrix indicates what subjects <em>can</em> do,
	<strong>not</strong> what they are authorized to do. Authorization is
	<ol class="answer_list">
	<li> determined in combination with the password file.
	<li> enforced by the OS kernel.
	<li> enforced by the file system.
	<li> a management policy, <strong>not</strong> part of the OS.
	<li> None of the above
	</ol>
</li><br/>
<li> Protection commands are used by processes to
	<ol class="answer_list">
	<li> enforce the rights recorded in the protection matrix.
	<li> prevent changes to the protection matrix.
	<li> change the protection matrix.
	<li> create the Access Control List or Capability List that
		corresponds to the protection matrix.
	<li> None of the above
	</ol>
</li><br/>
<li> The protection commands for "Create Subject" and "Delete Subject"
	<ol class="answer_list">
	<li> add/remove a row from the protection matrix.
	<li> add/remove a column from the protection matrix.
	<li> modify an entry in the protection matrix.
	<li> None of the above
	</ol>
</li><br/>
<li> The protection commands for "Create Object" and "Delete Object"
	<ol class="answer_list">
	<li> add/remove a row from the protection matrix.
	<li> add/remove a column from the protection matrix.
	<li> modify an entry in the protection matrix.
	<li> None of the above
	</ol>
</li><br/>
<li> The protection commands for "Insert Right" and "Remove Right"
	<ol class="answer_list">
	<li> add/remove a row from the protection matrix.
	<li> add/remove a column from the protection matrix.
	<li> modify an entry in the protection matrix.
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of access control allows the owner of an object to determine
	who should have access to it?
	<ol class="answer_list">
	<li> Selective access control
	<li> Discretionary access control
	<li> Proscribed access control
	<li> Mandatory access control
	<li> None of the above
	</ol>
</li><br/>
<li> Which type of access control uses organizational rules to determine which
	subjects have rights to various objects?
	<ol class="answer_list">
	<li> Selective access control
	<li> Discretionary access control
	<li> Proscribed access control
	<li> Mandatory access control
	<li> None of the above
	</ol>
</li><br/>
<li> Within an organizational structure in which <strong>all</strong>
	objects and subjects are assigned "security levels", the
	Biba Model of mandatory access control
	<ol class="answer_list">
	<li> restricts subjects to read only files which have an equal or
		higher security level than they do.
	<li> restricts subjects to read only files which have an equal or
		lower security level than they do.
	<li> restricts subjects to write only to files which have an equal or
		higher security level than they do.
	<li> restricts subjects to write only to files which have an equal or
		lower security level than they do.
	<li> None of the above
	</ol>
</li><br/>
<li> Within an organizational structure in which <strong>all</strong>
	objects and subjects are assigned "security levels", the
	Bell-LaPadula Model of mandatory access control
	<ol class="answer_list">
	<li> restricts subjects to read only files which have an equal or
		higher security level than they do.
	<li> restricts subjects to read only files which have an equal or
		lower security level than they do.
	<li> restricts subjects to write only to files which have an equal or
		higher security level than they do.
	<li> restricts subjects to write only to files which have an equal or
		lower security level than they do.
	<li> None of the above
	</ol>
</li><br/>
<li> Which security model is designed to allow managers to actively direct
	their subordinates?
	<ol class="answer_list">
	<li> Bell-LaPadula Model
	<li> Biba Model
	<li> None of the above
	</ol>
</li><br/>
<li> Which security model is designed to keep (military) secrets?
	<ol class="answer_list">
	<li> Bell-LaPadula Model
	<li> Biba Model
	<li> None of the above
	</ol>
</li><br/>
<li> The question of how to keep information that a server process gets from
	a client process from being passed on to a third party is known as
	<ol class="answer_list">
	<li> steganography.
	<li> the encryption conundrum.
	<li> the confinement problem.
	<li> a security sieve.
	<li> None of the above
	</ol>
</li><br/>
<li> Covert channels are
	<ol class="answer_list">
	<li> difficult to stop simply because they use subtle and "underhanded"
		ways to pass along information.
	<li> frequently used to allow remote systems to communicate.
	<li> noisy but enable information to be reliable sent.
	<li> designed to ensure the integrity of transmitted data.
	<li> None of the above
	</ol>
</li><br/>
<li> Hiding information within other unrelated information is called
	<ol class="answer_list">
	<li> semiology.
	<li> steganography.
	<li> cryptography.
	<li> cartography.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are design principles for security?
	<ol class="answer_list">
	<li> System designs should be private.
	<li> The default should be <strong>no</strong> access.
	<li> Check for the current rights to a resource upon each use,
		<strong>not</strong> just those it had when the resource
		was acquired.
	<li> Only give new processes the privileges of their parent.
	<li> Protection mechanisms should be built into the OS.
	<li> Security schemes <strong>must</strong> be psychologically
		acceptable.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are design principles for security?
	<ol class="answer_list">
	<li> System designs should be public.
	<li> The default read/write access to files should be given only for
		those owned by the process owner.
	<li> Check for the current rights to a resource upon each use,
		<strong>not</strong> just those it had when the resource
		was acquired.
	<li> Give each process the least privilege possible.
	<li> Protection mechanisms belong in a single process, separate from
		the OS, to ensure it isn't compromised if the OS is.
	<li> Security schemes <strong>must</strong> be psychologically
		acceptable.
	<li> None of the above
	</ol>
</li><br/>

<li> With respect to cryptography, the idea that encryption algorithms should
	be public, so that the key is the sole means for ensuring secrecy,
	is called
	<ol class="answer_list">
	<li> security by obscurity.
	<li> saltiness.
	<li> Kerckhoffs' principle.
	<li> algorithmic strength.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to cryptography, the computational effort needed to convert
	encrypted text back into its original form <strong>without</strong>
	knowing the encryption key(s) is known as
	<ol class="answer_list">
	<li> security by obscurity.
	<li> the an algorithm's saltiness.
	<li> Kerckhoffs' principle.
	<li> the encryption algorithm's strength.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to cryptography, the encrypted version of the text (or data)
	is called
	<ol class="answer_list">
	<li> the encryption key.
	<li> plaintext.
	<li> ciphertext.
	<li> salt.
	<li> None of the above
	</ol>
</li><br/>
<li> With respect to cryptography, the original text (or data) that was intended
	for direct consumption by a human (or computer program) is called
	<ol class="answer_list">
	<li> the encryption key.
	<li> plaintext.
	<li> ciphertext.
	<li> salt.
	<li> None of the above
	</ol>
</li><br/>
<li> When the key to encrypt text/data is <em>different</em> from the key
	to decrypt the encrypted text/data, this is called
	<ol class="answer_list">
	<li> symmetric key cryptography.
	<li> asymmetric key cryptography.
	<li> secret key cryptography.
	<li> one-way hash function cryptography. 
	<li> None of the above
	</ol>
</li><br/>
<li> When the key to encrypt text/data is the <em>same</em> as the key
	to decrypt the encrypted text/data, this is called
	<ol class="answer_list">
	<li> symmetric key cryptography.
	<li> asymmetric key cryptography.
	<li> secret key cryptography.
	<li> one-way hash function cryptography. 
	<li> None of the above
	</ol>
</li><br/>
<li> Advantage(s) of secret key over public key cryptography are
	<ol class="answer_list">
	<li> the algorithms are generally quite fast, handling large amounts
		of text/data efficiently.
	<li> it can be used as the basis for digital signatures.
	<li> it requires the secure exchange of keys.
	<li> that it's harder to break since the algorithms are kept secret.
	<li> None of the above
	</ol>
</li><br/>
<li> Disadvantage(s) of secret key over public key cryptography are
	<ol class="answer_list">
	<li> the algorithms are generally quite slow.
	<li> it can be used as the basis for digital signatures.
	<li> it requires the secure exchange of keys.
	<li> that it's easier to break since the algorithms are kept secret.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are secret key cryptography algorithms currently
	recommended for use by the National Institute for Standards
	and Technology (NIST)?
	<ol class="answer_list">
	<li> Twofish
	<li> RSA
	<li> Triple DES
	<li> Advanced Encryption Standard (AES)
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are secret key cryptography algorithms currently
	recommended for use by the National Institute for Standards
	and Technology (NIST) for protecting US government TOP SECRECT
	documents?
	<ol class="answer_list">
	<li> Twofish
	<li> RSA
	<li> Triple DES
	<li> Advanced Encryption Standard (AES)
	<li> None of the above
	</ol>
</li><br/>
<li> For public key cryptography, the 2 keys required are
	<ol class="answer_list">
	<li> are randomly chosen by the person send and the person receiving
		the message.
	<li> the same key.
	<li> bit-wise palindromes of one another.
	<li> related to one another by a mathematical property.
	<li> None of the above
	</ol>
</li><br/>
<li> For Alice and Bob to have a two-way communication with one another using
	public key cryptography, how many separate keys <strong>must</strong>
	be created and used?
	<ol class="answer_list">
	<li> 2 keys created, and both keys are used.
	<li> 2 keys created, but only one key is used.
	<li> 4 keys created, but only two keys are used.
	<li> 4 keys created, and <strong>all</strong> keys are used.
	<li> None of the above
	</ol>
</li><br/>
<li> Advantage(s) of public key over secret key cryptography are
	<ol class="answer_list">
	<li> the algorithms are generally quite fast, handling large amounts
		of text/data efficiently.
	<li> it can be used as the basis for digital signatures.
	<li> it requires the secure exchange of keys.
	<li> that it's harder to break since the algorithms are kept secret.
	<li> None of the above
	</ol>
</li><br/>
<li> Disadvantage(s) of public key over secret key cryptography are
	<ol class="answer_list">
	<li> the algorithms are generally quite slow.
	<li> it can be used as the basis for digital signatures.
	<li> it requires the confidential exchange of keys.
	<li> that it's harder to break since the algorithms are kept secret.
	<li> None of the above
	</ol>
</li><br/>
<li> For Bob to send confidential messages to Alice, match the correct
	choice of person, action, and information in the following sequence
	of steps. You should restrict your choice to one of the two options
	following each blank.
	[Note: Some options may be used more than once, or not at all.]
	<ul class="bullet_list">
	<li> ___A___ [ Alice | Bob ] creates a public-private key pair.
	<li> ___B___ [ Alice | Bob ] publishes the ___C___ [ public | private ]
		key to the world.
	<li> ___D___ [ Alice | Bob ] uses ___E___'s [ Alice | Bob ]
		___F___ [ public | private ] key to
		___G___ [ encrypt | decrypt ] a message.
	<li> ___H___ [ Alice | Bob ] sends the ___I___ed [ encrypt | decrypt ]
		message to ___J___ [ Alice | Bob ].
	<li> ___K___ [ Alice | Bob ] receives the
		___L___ed [ encrypt | decrypt ] message from
		___M___ [ Alice | Bob ].
	<li> ___N___ [ Alice | Bob ] ___O___s [ encrypt | decrypt ]
		the message using the ___P___ [ public | private ] key.
	<li> Alice reads the message.
	</ul>
	<table><tr><td>
		<ol class="match_list">
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		</ol>
	</td><td>
		<ol class="answer_list">
		<li> Alice
		<li> Bob
		<li> public
		<li> private
		<li> encrypt
		<li> decrypt
		</ol>
	</td></tr></table>
</li><br/>
<li> Many available cryptographically secured communication systems (e.g.,
	PGP, GPG) use both secret key and public-private key algorithms because 
	<ol class="answer_list">
	<li> the public-private keys are used to exchange the secret keys since
		secret key algorithms are used to provide secrecy for the
		actual text/data (due to their greater speed and efficiency).
	<li> the secret keys are used to exchange the public-private keys since
		public-private key algorithms are used to provide secrecy for
		the actual text/data (due to their greater speed and
		efficiency).
	<li> the public-private keys are used to encrypt data for sending
		while the secret keys are used to decrypt data for reading.
	<li> the secret keys are used to encrypt data for sending while the
		public-private keys are used to decrypt data for reading.
	<li> None of the above
	</ol>
</li><br/>
<li> One-Way hash functions
	<ol class="answer_list">
	<li> encrypt their input, using only a secret key algorithm.
	<li> encrypt their input, using only a public key algorithm.
	<li> encrypt their input, using either a secret or public key algorithm.
	<li> create a digest of their input which is often shorter than
		the original text.
	<li> None of the above
	</ol>
</li><br/>
<li> The primary difference(s) between encryption algorithms and one-way
	hash functions are
	<ol class="answer_list">
	<li> encryption algorithms are faster and more efficient.
	<li> encryption algorithms are reversible.
	<li> one-way hash functions <strong>must</strong> use a non-secret salt.
	<li> different inputs to one-way hash functions <strong>always</strong>
		provide different results.
	<li> None of the above
	</ol>
</li><br/>
<li> Which of the following are one-way hash functions are that currently
	recommended for use by the National Institute for Standards
	and Technology (NIST)?
	<ol class="answer_list">
	<li> RSA
	<li> SHA512
	<li> MD5
	<li> Twofish
	<li> None of the above
	</ol>
</li><br/>
<li> Which technologies (in combination) are used to provide non-repudiation
	for public communications (i.e., digital signatures)?
	<ol class="answer_list">
	<li> Symmetric key cryptography
	<li> Asymmetric key cryptography
	<li> One-way hash functions
	<li> Salt values.
	<li> None of the above
	</ol>
</li><br/>
<li> For Alice to digitally sign a document, and for Bob to subsequently
        confirm that signature for the given document, match the correct
	choice of person, action, and information in the following sequence
	of steps.  You should restrict your choice to one of the two options
	following each blank.
	[Note: Some options may be used more than once, or not at all.]
	<ul class="bullet_list">
	<li> ___A___ [ Alice | Bob ] creates a public-private key pair,
		publishing the public key to the world.
	<li> ___B___ [ Alice | Bob ] uses a one-way hash to create a
		message digest of the document.
	<li> ___C___ [ Alice | Bob ] uses their ___D___ [ public | private ]
		key to ___E___ [ encrypt | decrypt ] the
		___F___ [ message digest | document ], creating the
		signature block.
	<li> The signature block is then appended to the
		___G___ [ message digest | document ].
	<li> ___H___ [ Alice | Bob ] obtains ___I___'s [ Alice | Bob ]
		___J___ [ public | private ] key.
	<li> ___K___ [ Alice | Bob ] strips the signature block from the
		signed document.
	<li> ___L___ [ Alice | Bob ] ___M___s [ encrypt | decrypt ] the
		signature block to obtain a message digest (MDsigned) using
		___N___'s [ Alice | Bob ] ___O___ [ public | private ] key.
	<li> ___P___ [ Alice | Bob ] creates a second message digest (MDdoc).
	<li> ___Q___ [ Alice | Bob ] compares MDsigned with MDdoc,
		and if they are then this document was signed by Alice.
	</ul>
	<table><tr><td>
		<ol class="match_list">
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		<li> __________________
		</ol>
	</td><td>
		<ol class="answer_list">
		<li> Alice
		<li> Bob
		<li> public
		<li> private
		<li> encrypt
		<li> decrypt
		<li> message digest
		<li> document
		</ol>
	</td></tr></table>
</li><br/>
<li> For the purpose of non-repudiation, keeping a document and signature
	block together is
	<ol class="answer_list">
	<li> unnecessary since the document can <strong>always</strong> be
		regenerated from the signature block.
	<li> helpful, but <strong>not</strong> necessary since the signature
		block can be recreated from the document.
	<li> necessary since the document <strong>must</strong> be used to
		create the message digest needed for confirmation.
	<li> necessary since the message digest for the document
		<strong>must</strong> be created using the salt from
		the signature block.
	<li> None of the above
	</ol>
</li><br/>
<li> An important aspect of public key cryptography that allows Alice to use
	the same public-private key pair to create digital signatures
	<em>and</em> to allow anyone else (e.g., Bob) to send her secure
	communications that no one else can read is due to which of the
	following characteristics of asymmetric algorithms like RSA?
	<ol class="answer_list">
	<li> the private key can be used to decrypt information encrypted using
		the private key.
	<li> the public key can be used to decrypt information encrypted using
		the public key.
	<li> the private key can be used to decrypt information encrypted using
		the public key.
	<li> the public key can be used to decrypt information encrypted using
		the private key.
	<li> None of the above
	</ol>
</li><br/>
<li> While retaining their non-repudiability characteristic, digital
	signatures can
	<ol class="answer_list">
	<li> be used to sign a document, but only by one person.
	<li> be used to sign multiple documents, but only by one person.
	<li> be used to have multiple people sign a document, by having
		each sign the previous combined document and signature
		block in succession (so long as the signing order is
		communicated).
	<li> be used to have muiltiple people sign a document, by having
		the primary signer use the private keys of the other signers
		to encrypt the message digest once with each key to create
		the signature block.
	<li> None of the above
	</ol>
</li><br/>
<li> Why is Alice's publishing of her public key on an unsecured web site
	insufficient to ensure confidentiality?
	<ol class="answer_list">
	<li> Because anyone could use her public key to read encrypted messages
		that others are sending to Alice.
	<li> Because anyone could digitally sign documents using Alice's
		public key, and thus could pretend to be Alice
		<strong>without</strong> anyone finding out.
	<li> Because a third party, Mallory, could make a random change to her
		published key making sure that Alice was unable to read
		any messages sent to her (encrypted with the altered public
		key).
	<li> Because a third party, Mallory, could change her published key
		to be that of his own public key, thus enabling a
		man-in-the-middle attack for encrypted communications sent
		to Alice.
	<li> None of the above
	</ol>
</li><br/>
<li> How does using a trusted third party certificate authority (CA) when
	publishing a public key help to ensure the secrecy of communications?
	<ol class="answer_list">
	<li> The digital signature of the CA provides assurance that the
		public key is unaltered.
	<li> The CA hosts a well secured and trusted web site to which the
		public key is published - thus avoiding the problems of using
		an unsecured web site.
	<li> The CA serves as an intermediary for <strong>all</strong>
		encrypted messages sent to Alice, and the CA decrypts the
		message on Alice's behalf to ensure that her public key
		was used to encrypt it.
	<li> The CA vouches for the authenticity of the public key (i.e., it
		belongs to the claimed owner).
	<li> None of the above
	</ol>
</li><br/>
<li> Key storage is an important consideration for secret keys when using
	symmetric cryptography because
	<ol class="answer_list">
	<li> if the one copy of the secret key is altered or lost, then any
		information encrypted using that key will be lost.
	<li> knowing one secret key from the key store compromises
		<strong>all</strong> other secret keys in the key store.
	<li> if a third party discovers the secret key, than anything encrypted
		using it can be compromised.
	<li> if a third party discovers the public key (of the key pair),
		they could "fake" perfect digital signatures on documents.
	<li> None of the above
	</ol>
</li><br/>
<li> Key storage is an important consideration for private keys when using
	asymmetric cryptography because
	<ol class="answer_list">
	<li> if the one copy of the private key is altered or lost, then any
		information encrypted using the corresponding public key will
		be lost.
	<li> knowing one private key from the key store compromises
		<strong>all</strong> other private keys in the key store.
	<li> if a third party discovers the private key, than anything
		encrypted using the corresponding public key can be compromised.
	<li> if a third party discovers the private key,
		they could "fake" legitimate digital signatures on documents.
	<li> None of the above
	</ol>
</li><br/>
<li> The purpose of a Hardware Security Module (HSM) with respect to
	cryptography is to
	<ol class="answer_list">
	<li> render the stored keys unusable upon detection of tampering.
	<li> prevent unauthorized users from accessing the stored keys.
	<li> verify the digital signatures of the stored keys.
	<li> create public-private key pairs for asymmetric algorithms.
	<li> None of the above
	</ol>
</li><br/>
<li> The advantage of using a Trusted Platform Module (TPM) over using only
	a Hardware Security Module (HSM) is that
	<ol class="answer_list">
	<li> because the TPM verifies the Certificate Authority's digital
		signatures, <strong>all</strong> stored keys can be trusted.
	<li> the TPM only allows authorized users to read stored keys back
		to their programs.
	<li> the TPM renders the stored keys unusable upon detection of
		tampering.
	<li> the TPM performs the encrypt/decrypt operations so that keys
		<strong>never</strong> leave the module.
	<li> None of the above
	</ol>
</li><br/>
<li> The advantage(s) of using a Trusted Platform Module (TPM) that is fully
	integrated into the hardware and OS include
	<ol class="answer_list">
	<li> the ability to securely encrypt <strong>all</strong> data stored
		on installed HDDs and SSDs.
	<li> the inability to install unauthorized (e.g., unsigned) software.
	<li> a guarantee that any encrypted data on the system can
		<strong>always</strong> be accessed.
	<li> attestation to verify that the computer is currently
		authorized to run a particular software (or access specific
		data).
	<li> None of the above
	</ol>
</li><br/>

</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc6125" style="float: right">CPSC 6125</a>
</em>

</body>
</html>

