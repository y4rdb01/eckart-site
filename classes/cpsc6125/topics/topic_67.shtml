<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Advanced Operating Systems (CPSC 6125)
	- Distributed Systems (Middleware)
</p>

<ol>
<li> The software layer that sits on top of the OS, implementing
	the abstraction layer that provides uniformity of use and
	operation despite the differences between computer hardwares
	and operating systems in the distributed system.
<li> Document-Based
	<ol>
	<li> The original World Wide Web is an example of this
		approach. Many capabilities have been added since
		its initial inception, but here we focus on only
		static documents without any embedded media or
		Cascading Sytle Sheets (CSS).
	<li> A Uniform Resource Locator (URL) indicates the document
		to be retrieved.
	<li> Entering a URL into the browser (on the client) specifies
		the remote server to contact, as well as the location
		of the document to retrieve.
		<ol>
		<li> URL = "http://csc.columbusstate.edu/eckart/personal/circus/index.shtml"
		<li> Browser gets IP address for "csc.columbusstate.edu" from DNS.
		<li> Browser creates TCP connection to the IP address on port 80 (the default port for http - HyperText Trasport Protocol).
		<li> Browser sends request to the remote server to retrieve the document at location "eckart/personal/circus/index.shtml".
		</ol>
	<li> The remote server returns the indicated document.
		<ol>
		<li> The web server (middleware) on the remote server
			locates the document and packages it for
			delivery to the requesting client.
		</ol>
	<li> And the client browser receives and renders the document.
	<li> Note that only entire documents are delivered. Thus this
		is document-based communication. Also, while many
		documents may consist of a single file, the use of
		server-side includes (in the example here) means that
		the web server on the remote computer may assemble the
		document from multiple files.
	</ol>
<li> File-System-Based
	<ol>
	<li> Transfer Model
		<ol>
		<li> Remote editing of a file without downloading the
			file in its entirety, is exemplified by the
			<a href="/eckart/classes/cpsc3125/topics/topic_38.shtml">Network File System</a> (NFS).
		<li> Alternatively, the entire file can be download
			(and uploaded) with any edits occuring while
			the file is local. The File Transfer Protocol
			(ftp) is a simple example of this.
		<li> If only a few small edits are needed, then the
			first approach is probably more efficient,
			however if much of the file must be modified,
			then the second approach is likely a more
			efficient use of network bandwidth.
		</ol>
	<li> The Directory Hierarchy need not be the same on each
		client, even when they contain all of the same files.
		For example, when using NFS, file systems could be
		mounted at different places on different computers,
		making their absolute locations (i.e., location with
		respect to the local root node) different.
	<li> Naming Transparency
		<ol>
		<li> Location transparency gives no indication of where
			the file is physically located. While using
			server names as part of the file path (e.g.,
			as a top-level mount point name) gives the
			server name - this doesn't necessarily give
			the geographic location of the file (unless
			that is how the server names are chosen).
			[Do typical URLs violate this principle?]
		<li> Location independence means that the path name
			of the file does not change when the file's
			physical location changes (e.g., moved from
			server #1 to server #2). Mounting file systems
			under points named for the servers they come
			from would violate this principle. [Do typical
			URLs violate this principle?]
		<li> Making sure that all files have the same path
			names, regardless of the computer being used,
			requires more care - but it makes using and
			programming them MUCH easier.
		</ol>
	<li> File Sharing Semantics
		<ol>
		<li> <em>Sequential Consistency</em> is when actions
			on shared
			resources (e.g., files) occur as if they are
			performed in order. So a "write" followed by
			a "read" should have the "read" return the
			value that was just written.
		<li> Using a single (shared) file system with no file
			caching by clients provides sequential 
			consistency, but it doesn't perform well as the
			number of clients becomes large.
		<li> <em>Session Semantics</em> weakens the idea of
			sequential consistency so that "changes to an
			open file are initially visible only to the
			process that made them, and only when the
			file is closed are the changes made visible
			to other processes". If multiple clients have
			the same file open, then the last "close" wins.
		<li> Alternatively, the download/upload model of file
			transfer can be used, with a download causing
			the file to be locked until it is uploaded -
			which can greatly delay other processes
			depending on how long the file is locked.
		</ol>
	</ol>
<li> Object-Based
	<ol>
	<li> The <em>Common Object Request Broker Architecture</em>
		(CORBA) is an example of object-based middleware.
	<li> Similar to objects in languages like Java and C++, the
		objects here contain a mix of data that must be
		accessed via the object's methods.
	<li> <em>Object Request Brokers</em> (ORBs) in CORBA are used
		to enable clients to contact servers (in order to use
		their objects). The methods and parameter types of
		objects are described using the <em>Interface
		Definition Language</em> (IDL).
	<li> Clients call object methods on the server using a
		mechanism very much like RPC. Client and server
		stubs are created from the IDL for the object, while
		the ORBs handle the low-level communication details
		(there's an ORB on both the client and server sides,
		and the two ORBs perform the communication - hiding
		the details from both the client and server).
	<li> Because the IDL is not specific to a particular
		programming language, and because the ORBs hide the
		communication details, CORBA was designed for use
		in heterogeneous systems.
	<li> <em>Object adapters</em> wrap non-CORBA objects so that
		they can be used with CORBA.
	<li> One limitation of CORBA is that each object could exist
		on only a single server, thus limiting scalability.
	<li> <em>Simple Object Access Protocol</em> (SOAP) based
		web services are the successor of CORBA with XML
		Schema Definitions (XSDs) replacing the IDL.
	<li> <em>Representational State Transfer</em> (REST) based web
		services (often using JSON for data representation)
		are fast replacing SOAP based services as a faster
		and  lighter-weight alternative.
	</ol>
<li> Coordination-Based
	<ol>
	<li> Linda and tuple spaces
		<ol>
		<li> Linda was the first such system.
		<li> Uses a shared data space (called a tuple space)
			that is a time ordered list of data that have
			been published.
		<li> Unlike Object-based middleware, Linda does not
			associate any methods with the data. There are
			operations to place, remove, and find data in
			the shared data space (Linda uses "out", "in",
			and "read" respectively).
		<li> In Linda, "in" and "read" return the first
			matching tuple in the space (remember it's
			ordered by time). But if there is no matching
			tuple, then "in" blocks the calling thread
			(or process) until a matching value is added.
		<li> Coordination occurs via communication through the
			tuple space. You can use
			<em>out("mutex")</em> and
			<em>in("mutex")</em> to implement the
			semaphore <em>up</em> and <em>down</em>
			operations respectively.
		</ol>
	<li> Publish/Subscribe (often referred to as Pub/Sub)
		<ol>
		<li> Consumers "register" their interest in topics. 
		<li> When publishers publish data, they indicate
			what topic the data belongs to.
		<li> ALL consumers that have registered their interest
			in a topic are provided with data that is
			published on that topic.
		<li> Consumers can be publishers and publishers can
			also be consumers.
		<li> Registration (by consumers) and publication (by
			publishers) can occur
			<ol>
			<li> through a centralized authority
				(think of a magazine clearing house).
				This approach can ensure that all
				registered consumers receive the data.
			<li> in a decentralized fashion (in which
				publishers broadcast their data
				generally. A completely decentralized
				model (in which consumers do not have
				to register their interest with any
				3rd party) can make no guarantees
				about delivery (unless provided for
				by a lower-level protocol like TCP).
			</ol>
		<li>
		</ol>
	</ol>
<li> Test your understanding of the above by answering these
	<a href="/eckart/classes/cpsc3125/questions/questions_67.html">self-assessment questions</a>.
</ol>


<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc6125" style="float: right">CPSC 6125</a>
</em>

</body>
</html>

