<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Programming Languages (CPSC 5135)
	- Sub-programs as First-Class Objects
</p>

<ol>
<li> Sub-programs are generally treated differently from other types
	and values (e.g., integers). Being a first-class object means:
	<ol>
	<li> Having the ability to implement them within any scope/block;
	<li> Able to assign them as values and have variables of their type;
	<li> Being able to pass them as parameters (to sub-programs or templates/generics); and
	<li> Can return them as the result of other sub-programs.
	</ol>
<li> Upcalls (or callbacks) are a useful way of passing event
	notification and handling code to other parts of a system.
	Java GUI elements (for Swing) use this mechanism by creating
	new (possibly anonymous) classes that contain the new
	sub-program that has the desired behavior (and passes them
	via an instance of the class). See the following:
		<ol>
		<li> <a href="https://en.wikipedia.org/wiki/Callback_(computer_programming)">Callback</a>
		<li> <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern</a> -
			Consider this a pre-registration of multiple
			(potential) callbacks. Most often associated
			with event handling (e.g., Java Swing).
		</ol>
	Here's a sample callback/observer example from Java (note the
	use of the anonymous inner class "ActionListener" and the
	fact that the externally scoped "button" was declared as
	"final"):
<pre><code>
	public class Example {
		public static void main(String[] args) {
			final JButton button = new JButton("Click me!");
			JPanel panel = new JPanel();
			panel.add(button);
			button.addActionListener(
				new ActionListener() {
					public void actionPerformed(ActionEvent event) {
						button.setText("Ha Ha!");
					}
				}
			);
			JFrame frame = new JFrame();
			frame.add(panel);
			frame.pack();
                	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                	frame.setVisible(true);
		}
	}
</code></pre>
<li> If both first-class sub-programs and static scoping are supported,
	then sub-program values are generally represented by a
	<em>closure</em>, which is a combination of the pointer to the
	function code and an activation record for it's statically
	enclosed scope (access link). The <em>closure</em> rather
	than simply the function code pointer is then passed as the
	parameter.
<pre><code>
	int x = 2;			// X_a
	int f(int y) {
		return x + y;		// Static scoping uses the X_a reference.
	}
	int g(int (*h)(int)) {
		int x = 7;		// X_b
		return x + h(5);	// Static scoping uses the X_b reference.
	}
	int (*fun_ptr)(int);		// Function pointer variable declaration.
	fun_ptr = f;
	printf("%d or %d\n", g(f), fun_ptr);
</code></pre>
<li> Test your understanding of the above by answering these
	<a href="../questions/questions_27.html">self-assessment questions</a>.
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc5135" style="float: right">CPSC 5135</a>
</em>

</body>
</html>

