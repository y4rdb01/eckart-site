<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Programming Languages (CPSC 5135)
	- NetLogo Example (Schelling's Segregation)
</p>

<ol>
<li> <a href="../netlogo/segregation.nlogo">Schelling's Segregation</a> based on
	<a href="https://en.wikipedia.org/wiki/Thomas_Schelling#Models_of_segregation">Thomas Schelling</a>'s simple model of population segregation
	development via minimal preference differences. Be sure to check out
	<a href="http://ncase.me/polygons">this web site</a> to see a simple
	extension to the model - which may help explain why affirmative action
	programs are necessary to overcome intrinsic bias.
<pre><code>
	globals [happyCount]
	patches-own [flavor likeNeighborCount happy?]

	to setup
		set-patch-size 5
		resize-world 0 universeSize 0 universeSize
		clear-all
		initialize
		colorize
		reset-ticks
	end

	to go
		set happyCount 0
		if 0 = ticks mod 2 [ ask patches [
			set likeNeighborCount 0
			foreach [flavor] of neighbors [
				if flavor = ? [ set likeNeighborCount likeNeighborCount + 1 ]
			]
			ifelse likeNeighborcount < happinessThreshold
				[ set happy? false ]
				[
				 	set happy? true
					set happyCount happyCount + 1
				]
		]]
		if 1 = ticks mod 2 [ ask patches [
			if not happy? [
				let swapIn flavor
				let swapBack -1
				ask one-of other patches [
					if not happy? [
						set swapBack flavor
						set flavor swapIn
						set happy? true
					]
				]
				if swapBack > -1 [
					set flavor swapBack
					set happy? true
				]
			]
		] colorize ]
		tick
	end

	to initialize
		ask patches [ set flavor random maxFlavors ]
	end

	to colorize
		ask patches [
			if flavor = 0 [ set pcolor red ]
			if flavor = 1 [ set pcolor blue ]
			if flavor = 2 [ set pcolor green ]
			if flavor = 3 [ set pcolor yellow ]
			if flavor = 4 [ set pcolor brown ]
			if flavor = 5 [ set pcolor magenta ]
		]
	end

	to updatePlot
		plot happyCount * 100 / ((universeSize + 1) * (universeSize + 1))
	end
</code></pre>
<li> Test your understanding of the above by answering these
	<a href="../questions/questions_56.html">self-assessment questions</a>.
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc5135" style="float: right">CPSC 5135</a>
</em>

</body>
</html>

