<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Programming Languages (CPSC 5135)
	- Imperative vs Declarative
</p>

<ol>
<li> Imperative "statements" are actions (i.e., they cause a change in state).
<li> Declarative "statements" are definitional (i.e., delcaring a new variable or function).
<li> (Pure) functional languages have *no* imperative statements (e.g., some proper subsets of Lisp).
<li> While (pure) functional languages better support correctness,
	and reliability (readability may be more a matter of "taste"),
	they are often less efficient in their use of computational
	resources. [Consider a recursive fibonacci implementation!]
<li> From a practical standpoint, a mix of imperative and declarative
	styles is still the best fit for current needs and hardware.
<li> Test your understanding of the above by answering these
	<a href="../questions/questions_10.html">self-assessment questions</a>.
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc5135" style="float: right">CPSC 5135</a>
</em>

</body>
</html>

