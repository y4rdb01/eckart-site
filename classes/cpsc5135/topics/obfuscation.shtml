<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Programming Languages (CPSC 5135)
	- Obfuscation
</p>

<ol>
<li> <a href="https://en.wikipedia.org/wiki/Obfuscation">Obfuscation</a>
	<blockquote>
	The practice of deliberately hiding the intended meaning of a
	communication, making it confusing, ambiguous, and difficult to
	understand.
	</blockquote>
<li> Tools for obfuscating existing code are sometimes used in order to
	make it more difficult to reverse engineer code. This is particularlly
	useful when the code is copyrighted, contains trade secrets, or is
	otherwise sensitive. Obfuscation does not guarantee secrecy, but it
	does make it more likely. For example, there are a variety of
	<a href="https://www.owasp.org/index.php/Bytecode_obfuscation">Java
	Bytecode obfuscators</a>. A side benefit of Java Bytecode obfuscation
	is that the resulting Bytecode is often smaller in size than the
	original.
<li> As an intellectual challenge, some programmers create obfuscated
	source code. The following two programming language examples are
	reminders that almost any tool can be misused. Part of the practice
	of software engineering is to prevent the creation of programs like
	these.
<li> Fortran
	<p>
	In its original form, Fortran did not <em>reserve</em> its
	keywords, thus allowing them to be used as variable names.
	Furthermore, spaces were ignored and thus did not server to
	separate tokens.  The following side-by-side comparison helps
	(though only slightly) to see how these "features" can be used
	to obfuscate a program's meaning:
	</p>
	<table>
	<tr>
	<td>
<pre><code>
    integer go to,do 100 if,return 
    real read(4) 
    logical go to if 
    real logical(30) 
    data read/4h(1x,,3hi5,,4hf8.1,1h)/ 
    data go to,do 100 if,if 100 do/2,1,30/ 
    assign 100 to if go to 
    do 100 if=do 100 if,if 100 do 
    return=if 
    logical(if)=return 
    go to if=if-go to*(if/go to).eq.do 100 if 
    if(go to if) go to if go to 
    call call(logical,return) 
100 continue 
    print read, (if,logical(if),if=do 100 if,if 100 do) 
    stop 
    end 
    subroutine call( integer,real ) 
    integer real 
    real integer(real) 
    common(if)=if*if 
    integer(real)=common(real) 
    return 
    end
</code></pre>
	</td>
	<td width="50px" />
	<td>
<pre><code>
    INTEGER goto, do100if, return
    REAL read (4)
    LOGICAL gotoif
    REAL logical (30)
    DATA read / 4h(1x,, 3hi5,, 4hf8.1, 1h) /
    DATA goto, do100if, if100do / 2, 1, 30 /
    ASSIGN 100 TO ifgoto
    DO 100 if = do100if, if100do
    return = if
    logical (if) = return
    gotoif = if - goto * (if / goto) .eq.do100if
    IF (gotoif) goto ifgoto
    CALL call (logical, return)
100 CONTINUE
    PRINT read, (if, logical (if), if = do100if, if100do)
    STOP
    END
    SUBROUTINE call (integer, real)
    INTEGER real
    REAL integer (real)
    common (if) = if * if
    integer (real) = common (real)
    RETURN
    END SUBROUTINE call
</code></pre>
	</td>
	</tr>
	</table>
	<br/>
<li> C
	<p>
	The following is the 1985 Grand Prize winner (created by Carl Shapiro)
	of the <a href="http://www.ioccc.org">International Obfuscated C Code
	Contest</a>. It generates random mazes (here is an
	<a href="../obfuscated/shapiro/sampleOUTPUT">example</a>),
	though you it's certainly not obvious from the code.
	</p>
<pre><code>
#define P(X)j=write(1,X,1)
#define C 39
int M[5000]={2},*u=M,N[5000],R=22,a[4],l[]={0,-1,C-1,-1},m[]={1,-C,-1,C},*b=N,
*d=N,c,e,f,g,i,j,k,s;main(){for(M[i=C*R-1]=24;f|d>=b;){c=M[g=i];i=e;for(s=f=0;
s<4;s++)if((k=m[s]+g)>=0&&k&lt;C*R&&l[s]!=k%C&&(!M[k]||!j&&c>=16!=M[k]>=16))a[f++
]=s;if(f){f=M[e=m[s=a[rand()/(1+2147483647/f)]]+g];j=j&lt;f?f:j;f+=c&-16*!j;M[g]=
c|1&lt;&lt;s;M[*d++=e]=f|1&lt;&lt;(s+2)%4;}else e=d>b++?b[-1]:e;}P(" ");for(s=C;--s;P("_")
)P(" ");for(;P("\n"),R--;P("|"))for(e=C;e--;P("_ "+(*u++/8)%2))P("| "+(*u/4)%2
);}
</code></pre>
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc5135" style="float: right">CPSC 5135</a>
</em>

</body>
</html>

