<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>CPSC 5135: Assignment #1</strong>
</p>

<hr>

<p>
Using Common Lisp, write a program that solves a version of the traveling
salesman problem.
This problem is about a salesman wanting to visit all of the cities where his
clients are located. However, he wants to keep his travel time and costs to
a minimum, so he needs to find the shortest route that allows him to visit
each city at least once. Your program must take a list of city names and
locations and determine the order in which they should be visited in order to
minimize the total distance traveled. The salesman will start and end his
journey in different cities and should start (and end) in whichever city
minimizes the total distance that he must travel.
Your program should print out the final list of city names (one per line) in
the order that the salesman should visit them to minimize the distance traveled.
Your solution should use recursion and limit itself to:
<ol>
<li> Functions that you define (using "defun"); and
<li> The following builtin functions:
	<blockquote>
	defun, lambda, eval, quote, cond, car, cdr, cons, and, or, not,
	eq, equal, <, >, +, -, *, truncate, rem, atom, numberp, null, list,
	write, format
	</blockquote>
</ol>
Use of any other functions or constructs in your solution will result
in the loss of substantial points unless their use is first cleared
with the professor.  In particular, your program must <strong>NOT</strong>
use any kind of assignment statement or looping construct.
</p>

<p>
You will need to define two functions
(and any additional functions you find useful/helpful):
<ul>
<li> travel - takes a single argument which is the list of cities to be
	visited, The returned list has the same format as the input, but
	with the cities appearing in the desired (shortest path) order.
<li> printcities - takes a single argument which is the list of cities in the
	order that they should be visited (should be the same format as the
	input for "travel") and prints each city (one per line) in the order
	in which they appear in the list.
	Only the city name should be printed (NOT the associated coordinates).
	The returned value should be "t".
</ul>
The single input argument for both "travel" and "printcities" is a list of
city entries that are composed of a city name and
corresponding location (which is given as a dotted pair of x and y coordinates).
Thus the input to your functions should look like:
<code><pre>
	(
		(Atlanta (50 . 50))
		(Orlando (100 . -225))
		(Knoxville (60 . 100))
		(Dothan (10 . -75))
	)
</pre></code>
Since it's easier to read the printed list of city names, it is recommended
that you write the "printcities" function first in order to make testing of
the "travel" function a bit easier.
</p>

<p>
Please put all of your functions in a file named "travel"
and your test functions in another file (e.g., "mytest")
so that your Lisp sessions will look something like:
<code><pre>
	[1]> (load "c:/Users/my_user_name/Desktop/travel")
	;; Loading file C:\Users\my_user_name\Desktop\travel ...
	;; Loaded file C:\Users\my_user_name\Desktop\travel
	T
	[2]> (load "c:/Users/my_user_name/Desktop/mytest")
	;; Loading file C:\Users\my_user_name\Desktop\mytest ...
	;; Loaded file C:\Users\my_user_name\Desktop\mytest
	T
	[3]> (runTest1)
	...
</pre></code>
where the "mytest" file contains something like the following functions
(note that the answers will be different since a different start city is
indicated for each):
<code><pre>
	(defun runTest1 ()
		(printcities (travel (quote 
			(
				(Atlanta (50 . 50))
				(Orlando (100 . -225))
				(Knoxville (60 . 100))
				(Dothan (10 . -75))
			)
		)))
	)


	(defun runTest1 ()
		(printcities (travel (quote 
			(
				(Knoxville (60 . 100))
				(Atlanta (50 . 50))
				(Orlando (100 . -225))
				(Dothan (10 . -75))
			)
		)))
	)
</pre></code>
This will save you a LOT of typing as you test and debug your functions.
It also means that when you submit your assignment I won't see your
test data and results and can use my own.
Finally, since reading the results is easier with "printcities", I would
<strong>strongly</strong> recommend that you get this function working
first.
</p>

<p>
Note that the above specifies that you should have (at least) two user defined
functions: "travel" and "printcities" (though you probably will need others).
Please use these names as it will aid in evaluating your work.
</p>

<p>
As indicated by the example, the list of cities are represented by:
<code><pre>
        city_list    -> '(' city { city } ')'
        city         -> '(' name location ')'
        location     -> '(' x_coordinate '.' y_coordinate ')'
        name         -> atom
        x_coordinate -> integer
        y_coordinate -> integer
</pre></code>
</p>

<p>
You are responsible for creating your own test data. It's a good idea to
create your test cases first, building upon your test data, as this will
help you with your development. Be sure to include a variety of "corner cases"
to ensure that your program doesn't work for only "normal" data.
Test driven development (TDD) is a good practice that you should cultivate.
</p>

<p>
As always, be sure to use good indentation, descriptive constant, variable,
type, function, procedure, and class names.  Use named constants when
appropriate.  Also use good commenting style, remembering that the first
thing in any program file should be a comment that gives a brief overview
of what the file contains (and should do).  You might find these
<a href="../../common/comment-guide.shtml">commenting guidelines</a> helpful.
</p>

<p>
Finally, please only submit your source code file(s) for the assignment
(e.g., travel.lsp). In particular, do <em>not</em> submit zip, jar, tar, or
other collections/archives.
</p>

<p>
<strong>Good luck!</strong>
</p>

<h3 align=center>But Wait, There's More!</h3>

<p>
If you are enrolled in the <em>graduate section</em> of this class, then you
must also implement a function "starttravel" that takes a single argument, a
list of city names and locations.
This function should use the "travel" function you've already defined but
requires the first city in the list of cities be the starting point (rather
than allowing any city to be the starting point).
</p>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc5135" style="float: right">CPSC 5135</a>
</em>

</body>
</html>

