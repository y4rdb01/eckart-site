<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Computer Science 2 (CPSC 1302)
	- Interfaces
</p>

<ol>
<li> Only contains method headers (which are implicitly public).
<li> There are no method implementations.
<li> There are no variables (either instance or class).
<li> However, constants can be defined though you don't need to indicate
	"public final static" as this is implicit for all "variable"
	declarations in an interface.
<li> No constructors can be (or are implicitly) defined.
<li> Extended Example:
<code><pre>
public interface Statistics {
	double mean();
	double median();
	double stdDeviation();
}

public class Grades implements Statistics {
	private ArrayList&lt;double> scores = new ArrayList&lt;double>();

	public double mean() {
		double sum = 0;
		for (int i = 0; i < scores.size(); i++) {
			sum += scores.get(i);
		}
		return sum / scores.size();
	}

	public double median() {
		if (scores.size() > 0) {
			return scores.get(scores.size() / 2);
		} else {
			return 0;
		}
	}

	public double stdDeviation() {
		...
	}
}
</pre></code>

<li> While a subclass can extend only (and exactly) one single class (either
	explicitly or the Object class implicitly), a class may implement as
	many Interfaces as it needs.
<li> While interfaces can be used as types, you can't create an instance of
	an interface (similar to an abstract class).
<li> As with superclasses, interface types (and variables) support polymorphism
	(for those classes that implement the interface).
<li> Java libraries provide many predefined interfaces, e.g., Comparable,
	Cloneable, Collection.
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc1302" style="float: right">CPSC 1302</a>
</em>

</body>
</html>

