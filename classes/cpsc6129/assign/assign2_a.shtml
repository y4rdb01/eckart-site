<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>CPSC 6129: Assignment #2</strong>
</p>

<hr>

<p>
Using Java and the ANTLR 4 system, you are to build a pretty printer
for <a href="SimpleLisp.shtml">Simple Lisp</a>. The amount of (extra)
indentation at each level must be four (4) spaces. The below describes
(and gives examples) of when to open up new levels of indentation and
when to close them. Your pretty printer should work for the complete
<a href="SimpleLisp.shtml">Simple Lisp</a> language (which means that
you should be able to use your test data for the
<a href="assign1_a.shtml">previous assignment</a> as
an excellent starting point for this one).
</p>

<blockquote>
<dl>
<dt><strong>defun</strong> / <strong>lambda</strong></dt>
	<dd>
	The opening paranthesis, "defun" (or "lambda"), and parameter list
	should be on a single line.  The body of the function (or lambda form)
	should be indented and the closing paranthesis must be on a
	separate line, vertically aligned with the opening paranthesis of
	the function (or lambda form). E.g.,
	<pre><code>
		(defun example (x y z)
			(and x y z)
		)

		(lambda (x y)
			(+ x y)
		)
	</code></pre>
	</dd>
<dt><strong>lambda</strong> form calls</dt>
	<dd>
	When a lambda form is given in place of a function name in a function
	call, then the lambda form should appear on the next line and be
	indented within the surrounding function call list. The arguments to
	the lambada form function call should each appear indented and on
	separate lines. The beginning and ending parentheses for the function
	call should be vertically aligned.
	E.g.,
	<pre><code>
		(
			(lambda (x y)
				(* x y)
			)
			14
			22
		)
	</code></pre>
	</dd>
<dt><strong>cond</strong></dt>
	<dd>
	The "cond" is printed on the same line as its opening parenthesis with
	the closing parenthesis on a separate line by itself and vertically
	aligned with the starting parenthesis. Each boolean test and action
	pair within the cond are indented on separate lines within their
	containing list (the opening and closing parentheses being vertically
	aligned on separate lines).
	E.g.,
	<pre><code>
		(cond
			(
				(< x 1)
				(+ x 5)
			)
			(
				(> x 30)
				(- x 70)
			)
			(
				t
				(* x y)
			)
		)
	</code></pre>
	</dd>
<dt><strong>and</strong> / <strong>or</strong></dt>
	<dd>
	The "and" ("or") is printed on the same line as its opening
	parenthesis with the closing parenthesis on a separate line by
	itself and vertically aligned with the starting parenthesis.
	Each of the arguments are indented on separate lines.
	E.g.,
	<pre><code>
		(and
			(eq x y)
			(> x (+ y 3))
			(< (* z x) y) 
		)
	</code></pre>
	</dd>
<dt>User defined function calls</dt>
	<dd>
	When calling a function that is not built into
	<a href="SimpleLisp.shtml">Simple Lisp</a> (i.e., a user
	defined function), the opening parenthesis and the function
	name should appear on the first line with the closing parenthesis
	Each of the arguments to the function should appear on separate
	lines (using the appropriate indentation rules for each).
	E.g.,
	<pre><code>
		(myStrangeNewFunction
			14
			(quote (a b))
			(cond
				(
					(and
						(< y x)
						(eq y x)
					)
					(* (+ y 2) (- x 3))
				)
				(
					t
					(and
						(> y x)
						(+ x y)
					)
				)
			)
		)
	</code></pre>
	</dd>
<dt>Everything Else</dt>
	<dd>
	The entire item appears on a single line of output starting at the
	appropriate level of indentation given the context in which it
	appears.
	E.g.,
	<pre><code>
		(+ (car (cdr x)) (cdr (cdr (car (cdr y)))))
	</code></pre>
	</dd>
</dl>
</blockquote>

<p>
Remember that indentation "carries forward", so that nested items will
tend to cascade toward the right (with their closing parentheses cascading
back to the left).
</p>

<p>
You are responsible for creating your own test data. It's a good idea to
create your test cases first, building upon your test data, as this will
help you with your development. Be sure to include a variety of "corner cases"
to ensure that your program doesn't work for only "normal" data.
Test driven development (TDD) is a good practice that you should cultivate.
</p>

<p>
As always, be sure to use good indentation, descriptive constant, variable,
type, function, procedure, and class names.  Use named constants when
appropriate.  Also use good commenting style, remembering that the first
thing in any program file should be a comment that gives a brief overview
of what the file contains (and should do).  You might find these
<a href="../../common/comment-guide.shtml">commenting guidelines</a> helpful.
</p>

Enjoy!

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
</em>

</body>
</html>

