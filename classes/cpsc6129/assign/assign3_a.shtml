<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>CPSC 6129: Assignment #3</strong>
</p>

<hr>

<p>
Using Java and the ANTLR 4 system, you are to implement a compiler for the
Simple Programming Language (SPL). The following describes the basic
syntax and semantics of SPL: 
</p>

<blockquote>
<dl>
<dt><strong>Comments</strong></dt>
	<dd>
	Comments begin with "#" and contine until the end of the current line.
	The text of a comment is ignored.
	E.g.,
	<pre><code>
		# This is a comment
		## and so is this. :-)
	</code></pre>
	</dd>
<dt><strong>Variables</strong></dt>
	<dd>
	Variables are implicitly declared at their first point of use within
	a program. All variables are of type integer. The names of variables
	must begin with a letter and can have 0 or more letters, digits, and
	underscores (_) thereafter. Variable names cannot be the same as
	any of the reserved keywords (see below).
	E.g.,
	<pre><code>
		a
		thisIsVariableNumber14
		What_value_does_this_hold
	</code></pre>
	</dd>
<dt><strong>Number Constants</strong></dt>
	<dd>
	Begin with a digit (0 thru 9) with zero or more digits and underscores
	(_) following. Number constants must end with a digit, and underscores
	must have a digit on either side of them (so you can't have multiple
	underscores next to one another). Notice that numbers cannot begin
	with a minus sign (see Arithmetic Operations).
	E.g.,
	<pre><code>
		4
		789
		12_345_741
	</code></pre>
	</dd>
<dt><strong>Input</strong></dt>
	<dd>
	The "get" statement reads one or more integers from the input
	(e.g., keyboard) and assigns them to the comma separated list of
	variables respectively.
	E.g.,
	<pre><code>
		get x;
		get first, second, third;
	</code></pre>
	</dd>
<dt><strong>Output</strong></dt>
	<dd>
	The "put" statement writes its arguments to the output (e.g., screen).
	All of the arguments are written on a single line, with an end-of-line
	marker written after the last argument is written. Arguments to the
	"put" statement may also be strings contained within matching
	double quotes ("), but strings may not contain an end-of-line marker.
	To include a double quote within a string, give it twice.
	E.g.,
	<pre><code>
		first = 1;
		second = 2;
		third = 3;
		put second * third;			# 6
		put first, second, third;		# 123
		put first, " ", second, " ", third;	# 1 2 3
		put """To be or not to be""";		# "To be or not to be"
	</code></pre>
	</dd>
<dt><strong>Arithmetic Operations</strong></dt>
	<dd>
	The arithmetic operations for negation (-), addition (+),
	subtraction (-),
	multiplication (*), division (/), and remainder (%) are supported.
	These operations may be combined into larger and more complex
	combinations. Negation has the highest precedence level, followed
	by multiplication, division, and remainder (all three having the
	same precedence), with addition and subtraction (also at the same
	precedence level) pulling up the rear. Parentheses are used to
	override the natural precedence (or to more clearly indicate the
	intended precedence). Operations of the same precedence level or
	evaluated left to right.
	E.g.,
	<pre><code>
		-4 * 3 + z / 14 - y % x
		((((-4) * 3) + (z / 14)) - (y % x))	# same as above
		-4 * (3 + z) / (14 - y) % x		# different from above
	</code></pre>
	</dd>
<dt><strong>Arithmetic Comparisons</strong></dt>
	<dd>
	The arithmetic comparisons are: equal (=), not equal (<>), less than
	(<), greater than (>), less than or equal (<=), and greater than or
	equal (>=). The operations can be used to compare any two arithmetic
	expressions created by using the arithmetic operations, integer
	constants, and variables. All of the arithmetic comparisons have
	higher precedence than all of the arithmetic operatons.
	E.g.,
	<pre><code>
		x + y < z - 14
		y * 3 - z >= x % y
	</code></pre>
	</dd>
<dt><strong>Boolean Operations</strong></dt>
	<dd>
	The boolean operations for negation (!), and (&), and or (|)
	are supported.  These operations may be combined into larger
	and more complex combinations. Negation has the highest precedence
	level, followed by and, then or.  Parentheses are used to
	override the natural precedence (or to more clearly indicate the
	intended precedence). Operations of the same precedence level or
	evaluated left to right.
	E.g.,
	<pre><code>
		! (x < y)		# same as: x >= y
		3 < x & x < 9 		# same as: (3 < x) & (x < 9)
		x = 3 | y = 4 & z = 2	# same as: x = 3 | (y = 4 & z = 2)
	</code></pre>
	</dd>
<dt><strong>Conditional Execution</strong></dt>
	<dd>
	SLP has an if-elsif-else statement. Each of the boolean expressions is
	evaluated in order until one yields true, in which case the
	corresponding statements are evaluated. If none of the boolean
	expressions yields true, and an else part is present, then the
	statements in the else part are executed. Zero or more elsif parts
	may appear. The else portion is optional.
	E.g.,
	<pre><code>
		if x < y then put x; end if;	# Minimal if statement
		if 4 > x then
			put x;
			get y;
		elsif y < z then
			put y, " is less than ", z;
		elsif z = x + y then
			put z;
			get x, y;
		else
			put "Oh well!";
		end if;
	</code></pre>
	</dd>
<dt><strong>Loops</strong></dt>
	<dd>
	The loop construct in SPL loops forever, but is coupled with
	the "exit" statement (see below) to provide control over
	how many times to repeat a loop.
	E.g.,
	<pre><code>
		# Count forever, starting from zero.
		x = 0;
		loop
			put "x = ", x;
			x = x + 1;
		end loop;
	</code></pre>
	</dd>
<dt><strong>Exit (from a Loop)</strong></dt>
	<dd>
	The exit statement leaves a loop, continuing execution with the
	statement direction after the loop. The exit statement can appear
	within if statements to provide conditional exit from a loop.
	Alternatively, the exit statement can also have an optional
	when clause that only exits when the boolean expression of the when
	clause is true.
	E.g.,
	<pre><code>
		# Print all the prime numbers (may take a while :-))
		put 2;
		candidate = 3;
		loop
			# Check candidate for primality
			divisor = 3;
			loop
				exit when candidate % divisor = 0;
				divisor = divisor + 2;
			end loop;
			if divisor = candidate then
				# Found a prime number
				put candidate;
			end if;
			candidate = candidate + 2;
		end loop;
	</code></pre>
	</dd>
<dt><strong>Statement Termination</strong></dt>
	<dd>
	If you haven't guessed by now, statements are terminated (not
	separated) by semi-colons (;).
	</dd>
</dl>
</blockquote>

<p>
Your compiler should generate Java (not Java Bytecode) as its intermediate
representation. The Java source code generated by your compiler (which
corresponds to the SPL source code) should then be compiled using
<em>javac</em> to create the Java Bytecode corresponding to the original
SPL source code. It is recommended that you create a simple Unix shell
script to orchestrate this process (though please document your approach
so that the instructor can understand how to execute your system without
too much searching). 
</p>

<p>
You are responsible for creating your own test data. It's a good idea to
create your test cases first, building upon your test data, as this will
help you with your development. Be sure to include a variety of "corner cases"
to ensure that your program doesn't work for only "normal" data.
Test driven development (TDD) is a good practice that you should cultivate.
</p>

<p>
As always, be sure to use good indentation, descriptive constant, variable,
type, function, procedure, and class names.  Use named constants when
appropriate.  Also use good commenting style, remembering that the first
thing in any program file should be a comment that gives a brief overview
of what the file contains (and should do).  You might find these
<a href="../../common/comment-guide.shtml">commenting guidelines</a> helpful.
</p>

Enjoy!

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
</em>

</body>
</html>

