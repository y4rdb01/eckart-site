<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>Dr. J Dana Eckart</strong>: Advanced Programming Languages (CPSC 6129)
	- Forth: Arithemtic Expressions
</p>

<ol>
<li> Download the complete binaries for Java
	<a href="http://www.antlr.org/download/antlr-4.4-complete.jar">jar file</a>
	from <a href="http://www.antlr.org/download.html">http://www.antlr.org/download.html</a>.
<li> On Unix and Cygwin, you're probably using the
	<a href="http://www.unix.com/man-page/All/1/bash">bash</a> shell by
	default (and if you aren't, I highly recommend that you do).  If so,
	in the <em>.bashrc</em> file in your home directory, add the following
	line (filling in the appropriate path name for your installation):
<pre><code>
	alias antlr4='java -cp /TheAbsolutePathWhereThisFileIsLocated/antlr-4.4-complete.jar org.antlr.v4.Tool'
</code></pre>
	If you're using Windows or another non-POSIX system, then you'll need
	to do something else (left as an exercise to the reader).
<li> In addition, you should go ahead and add the new jar file (and the current
	directory) to your CLASSPATH. Add (or adjust) a line like the following
	in the <em>.bashrc</em> file in your home directory:
<pre><code>
	export CLASSPATH=".:/TheAbsolutePathWhereThisFileIsLocated/antlr-4.4-complete.jar:$CLASSPATH"
</code></pre>
	NOTE: If you're running cygwin under Windows, you'll probably need to
	use the ";" to separate directories rather than ":" as <em>javac</em>
	is probably a Windows executable and is looking for the Windows style
	directory separator. In that case, be sure to use the double quotes,
	as bash will interpret the semi-colon as a command separator.
<li> <a href="../forth/antlr4_v1/src/Forth.g4">Forth.g4</a> is a simple grammar to
	recognize numbers, simple arithmetic calculations, and the print
	directive (e.g., "2  3  +  .").
	<ol>
	<li> <strong>Helpful Hint:</strong> The author places the semi-colon
		(;) that terminates grammar production rules on its own line
		whereas it's placed at the end of the same line for terminals
		described by regular expressions. This is because grammar rules
		often get additions, and having to remember to move the ending
		semi-colon (if it was on the same line as a rule) would be
		irritating (and you'd forget from time to time). However,
		terminals don't get added to in the same way, so placing the
		semi-colon on the same line saves vertical space making the
		compacted result a bit easier to scan and read.
	<li> This doesn't embed any actions, it simply recognizes a subset of
		legal Forth sentences for arithmetic expressions.
	<li> To make the program that actually does the recognition:
		<ol>
		<li> Use the bash alias, <em>antlr4</em>, to compile the
			grammar:
<pre><code>
	antlr4 Forth.g4
</code></pre>
		<li> Create a driver program (e.g.,
			<a href="../forth/antlr4_v1/src/GoForth.java">GoForth.java</a>)
			that runs the parser generated by Antlr4. 
		<li> Compile the antlr4 generated Java files along with the
			driver program:
<pre><code>
	javac *.java
</code></pre>
		<li> Run the recognizer and type in (or redirect from a test
			file) some test data (e.g., "2  3  +  ."):
<pre><code>
	java GoForth_v1 < testData
</code></pre>
		<li> <strong>Helpful Hint:</strong> Sometimes you'll get a
			great many error messages that will fly off the screen.
			While you can scroll back in the command window to see
			them, I personally find it much better to redirect
			both standard output and standard error (using ">&")
			into a file that I can more easily examine (and search				within). So, for example, you can run your driver
			program via:
<pre><code>
	java GoForth_v1 < testData >& outputAndErrors
</code></pre>
			and then examine the file "outputAndErrors" to see what
			happened. You can do the same thing for javac as well.
		</ol>
	</ol>
<li> While not required, you may find it helpful to use the
	<a href="https://ant.apache.org/">Ant</a> build system. Ant allows
	you to setup target dependencies much like the Unix <em>make</em>
	facility (but written in xml).
	<ol>
	<li> After downloading and unpacking ant, set the environment variable
		in your .bashrc file:
<pre><code>
	export ANT_HOME /PathToTheUnpackedAntDirectory/apache-ant-1.9.4
</code></pre>
	<li> Here's a <em>relatively</em> simple
		<a href="../forth/antlr4_v1/build.xml">example script</a>
		for the above example (be sure to save it with the name
		"build.xml" in the root directory of your project). It
		assumes that the ANTLR4 and your Java driver code are
		in a subdirectory called "src".
	<li> After making changes to your files (including the "build.xml"
		file), do "ant test" (you can list another target besides
		"test").  The "test" target has been set as the default
		so you can actually shorten this to "ant"
		(but only if the build file is named "build.xml").
		This will ensure that whatever needs redoing gets done. 
	<li> This example ant script takes input from "testData" and redirects
		all output to "outputAndErrors", but you can change this if
		you like.
	<li> Here is a <a href="../forth/antlr4_v1.zip">zip file</a>
		that contains the entire
		example (i.e., ant build script, ANTLR4 grammar file, Java
		driver code). Feel free to modify and use it for working
		on your own ANTLR4 assignments.
	</ol>
</ol>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
</em>

</body>
</html>

