<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>CPSC 3125: Assignment #1</strong>
</p>

<hr>

<p>
You are to write a C program that will produce a list of N prime numbers,
where N is specified on the command line.  Your program must use threads
so that P prime number candidates are always being considered, one by each
of P threads.  The number of threads, P, is an optional command line argument
and will appear second (last) on the command line if at all.  If P is not
given on the command line, a default value of 3 should be used.
While the command line argument indicating the number of threads to use in the
computation is optional, implementing it is not. To get full credit, your
program must support the use of the optional thread argument.
</p>

<p>
When a thread determines that the candidate is prime, it
must atomically place it in the list of prime numbers.  This must be done
in one or more critical sections (protected by mutex semaphores)
lest another thread try to add another candidate at
the same time.  Regardless of whether a candidate is prime, threads must
also coordinate getting the next candidate to consider for primality, which
means that this too resides in a critical section (also protected by mutex
semaphores).  As soon as N primes
have been found, all other threads should be terminated and the list of
primes printed (one number per line of output). Note that the list of
primes should be printed by your main/original process thread AFTER all N
primes have been found.
Your program should incorporate principles of good design,
including minimizing the time spent within critical sections.
You may use your choice of algorithm for determining
the primality of a candidate.
</p>

<p>
You are responsible for creating your own test data. It's a good idea to
create your test cases first, building upon your test data, as this will
help you with your development. Be sure to include a variety of "corner cases"
to ensure that your program doesn't work for only "normal" data.
Test driven development (TDD) is a good practice that you should cultivate.
</p>

</p>
When testing, be sure to use lots of different examples.  In particular,
if the value of N given on the command line is negative or zero.
Your program should be reasonably robust.
</p>

<p>
As always, be sure to use good indentation, descriptive constant, variable,
type, function, procedure, and class names.  Use named constants when
appropriate.  Also use good commenting style, remembering that the first
thing in any program file should be a comment that gives a brief overview
of what the file contains (and should do).  You might find these
<a href="../../common/comment-guide.shtml">commenting guidelines</a> helpful.
</p>

<p>
Finally, please only submit your source code file(s) for the assignment
(e.g., primes.c). In particular, do <em>not</em> submit zip, jar, tar, or
other collections/archives.
</p>

<p>
<strong>Good luck!</strong>
</p>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc3125" style="float: right">CPSC 3125</a>
</em>

</body>
</html>

