<!doctype HTML public "-//W3C//DTD HTML 3.2//EN">
<html lang="en">
<head>
<title>Dr. J Dana Eckart</title>
<link rev="mail" href="mailto:eckart_dana@columbusstate.edu">
</head>
<body>

<!--
	This is the primary overall style for the web site.
-->
<style>
	A:link    { color: #007a00; text-decoration: underline }
	A:visited { color: #7a0000; text-decoration: none }
	A:hover   { text-decoration: none }
	A:active  { color: #ff0000; text-decoration: none }
	Body	{ background-color: #ffffe5; color: #000000 }
	Body	{ font-size: 12pt }
	Address	{ font-size: 10pt }
	Table	{ font-size: 12pt }
	Th, Td	{ vertical-align: top }
	Th, Td	{ padding: 5px }
</style>

<p style="text-align: center; margin: auto; font-size: 150%">
	<strong>CPSC 3125: Assignment #2</strong>
</p>

<hr>

<p>
You are to write a C program that will produce a list of N prime numbers,
where N is specified on the command line.  Your program must use separate
processes (<strong>not</strong> threads as you did in the first assignment)
so that P prime number candidates are always being considered, one by each
of P processes.  The number of prime number checking processes, P, is an
optional command line argument
and will appear second (last) on the command line, if at all.  If P is not
given on the command line, a default value of 3 should be used.
When a process determines that the candidate is prime, it
must atomically place it in the list of prime numbers maintained by an
additional process (not part of the P processes that are prime number checkers)
that will be responsible for printing out the final list
(this should probably be the original/main process).
</p>

<p>
Shared memory (as illustrated in
<a href="/eckart/classes/cpsc3125/C/sample3.c">this example</a> and
described in the last video
<a href="/eckart/classes/cpsc3125/videos/video_15.shtml">of this set</a>)
should be used to allow the other processes to add to the list of prime numbers
(an action that should be atomic so that competing processes don't mess up
the list - thus you will need to use mutex semaphores to coordinate access to
it).  Regardless of whether a candidate is prime, processes must
also coordinate (again, via mutex semaphores) getting the next candidate to
consider for primality.
</p>

<p>
As soon as N primes have been found, the main process (which will print the
list of primes <strong>in sorted order</strong>)
should ensure all of the other processes are terminated (either
by waiting for them to finish on their own, or by killing them)
before printing the final list of prime numbers.
Your program should incorporate principles of good design,
including minimizing the time spent within critical sections.
You may use your choice of algorithm for determining
the primality of a candidate.
</p>

<p>
You are responsible for creating your own test data. It's a good idea to
create your test cases first, building upon your test data, as this will
help you with your development. Be sure to include a variety of "corner cases"
to ensure that your program doesn't work for only "normal" data.
Test driven development (TDD) is a good practice that you should cultivate.
</p>

</p>
When testing, be sure to use lots of different examples.  In particular,
if the value of N given on the command line is negative or zero.
Your program should be reasonably robust.
</p>

<p>
As always, be sure to use good indentation, descriptive constant, variable,
type, function, procedure, and class names.  Use named constants when
appropriate.  Also use good commenting style, remembering that the first
thing in any program file should be a comment that gives a brief overview
of what the file contains (and should do).  You might find these
<a href="../../common/comment-guide.shtml">commenting guidelines</a> helpful.
</p>

<p>
Finally, please only submit your source code file(s) for the assignment
(e.g., primes.c). In particular, do <em>not</em> submit zip, jar, tar, or
other collections/archives.
</p>

<p>
<strong>Good luck!</strong>
</p>

<hr/>
<em>
<a href="mailto:eckart_dana@columbusstate.edu?subject=web_pages" style="float: left">eckart_dana@columbusstate.edu</a>
<a href="/eckart/classes/cpsc3125" style="float: right">CPSC 3125</a>
</em>

</body>
</html>

